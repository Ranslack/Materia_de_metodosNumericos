/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package m√©todos4;

import javax.swing.JOptionPane;
import java.lang.Math;
import static java.lang.Math.abs;

/**
 *
 * @author yaser
 */
public class ReglafalsaTrigonometrica extends javax.swing.JFrame {

    double PI;
    double DivPiRaX = 0;
    double DivPiRaY = 0;
    double PiradX = 0;
    double PiradY = 0;
    double sumaX = 0;
    double sumaY = 0;
    double aprox = 0;
    double intx = 0;
    double inty = 0;
    double comp = 0;
    double comp2 = 0;
    double constante = 0;
    double ErrorI = 0;
    double Grado1 = 0;
    int decimales = 0;
    double Grado2 = 0;
    double Grado3 = 0;
    double Grado4 = 0;
    double Grado5 = 0;
    double Grado6 = 0;
    double x = 0;
    double y = 0;
    int minutosX = 0;
    int minutosY = 0;
    double segundosX = 0;
    double segundosY = 0;
    double pm = 0;
    double error = 0;
    int i = 1;
    boolean salir = false;
    String Fpm = "", Ferror = "";

    /**
     * Creates new form ReglafalsaTrigonometrica
     */
    public ReglafalsaTrigonometrica() {
        initComponents();
        this.setLocationRelativeTo(null);
        txtMinutosX.setVisible(false);
        txtMinutosY.setVisible(false);
        txtMinutosX.setEnabled(false);
        txtSegundosX.setEnabled(false);
        txtMinutosY.setEnabled(false);
        txtSegundosY.setEnabled(false);
        txtSegundosX.setVisible(false);
        txtSegundosY.setVisible(false);
        txtDivisionPiradianX.setEnabled(false);
        txtDivisionPiradianY.setEnabled(false);
        txtDivisionPiradianX.setVisible(false);
        txtDivisionPiradianY.setVisible(false);
        lblminutosx.setVisible(false);
        lblminutosy.setVisible(false);
        lblsegundosx.setVisible(false);
        lblsegundosy.setVisible(false);
        lblpiX.setVisible(false);
        lblpiY.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel8 = new javax.swing.JLabel();
        BtnResolver = new javax.swing.JButton();
        txtConstante = new javax.swing.JTextField();
        txtGrado1 = new javax.swing.JTextField();
        txtGrado2 = new javax.swing.JTextField();
        txtGrado3 = new javax.swing.JTextField();
        txtGrado4 = new javax.swing.JTextField();
        txtGrado5 = new javax.swing.JTextField();
        txtGrado6 = new javax.swing.JTextField();
        txtError = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        TxtDecimales = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtIntervaloX = new javax.swing.JTextField();
        txtIntervaloY = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        CbTrigonometrico = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        cbTipoDato = new javax.swing.JComboBox<>();
        txtMinutosX = new javax.swing.JTextField();
        txtSegundosX = new javax.swing.JTextField();
        txtMinutosY = new javax.swing.JTextField();
        txtSegundosY = new javax.swing.JTextField();
        lblsegundosy = new javax.swing.JLabel();
        lblminutosy = new javax.swing.JLabel();
        lblsegundosx = new javax.swing.JLabel();
        lblminutosx = new javax.swing.JLabel();
        Btnlimpiar = new javax.swing.JButton();
        txtDivisionPiradianX = new javax.swing.JTextField();
        txtDivisionPiradianY = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        lblpiY = new javax.swing.JLabel();
        lblpiX = new javax.swing.JLabel();

        jLabel8.setText("Grado 6");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximizedBounds(new java.awt.Rectangle(0, 0, 750, 650));
        setMinimumSize(new java.awt.Dimension(750, 650));
        getContentPane().setLayout(null);

        BtnResolver.setText("Resolver");
        BtnResolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnResolverActionPerformed(evt);
            }
        });
        getContentPane().add(BtnResolver);
        BtnResolver.setBounds(620, 400, 74, 22);

        txtConstante.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtConstanteKeyTyped(evt);
            }
        });
        getContentPane().add(txtConstante);
        txtConstante.setBounds(10, 50, 71, 30);

        txtGrado1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtGrado1KeyTyped(evt);
            }
        });
        getContentPane().add(txtGrado1);
        txtGrado1.setBounds(100, 50, 71, 30);

        txtGrado2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtGrado2KeyTyped(evt);
            }
        });
        getContentPane().add(txtGrado2);
        txtGrado2.setBounds(190, 50, 71, 30);

        txtGrado3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtGrado3KeyTyped(evt);
            }
        });
        getContentPane().add(txtGrado3);
        txtGrado3.setBounds(280, 50, 71, 30);

        txtGrado4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtGrado4KeyTyped(evt);
            }
        });
        getContentPane().add(txtGrado4);
        txtGrado4.setBounds(370, 50, 71, 30);

        txtGrado5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtGrado5KeyTyped(evt);
            }
        });
        getContentPane().add(txtGrado5);
        txtGrado5.setBounds(460, 50, 71, 30);

        txtGrado6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtGrado6KeyTyped(evt);
            }
        });
        getContentPane().add(txtGrado6);
        txtGrado6.setBounds(550, 50, 71, 30);

        txtError.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtErrorKeyTyped(evt);
            }
        });
        getContentPane().add(txtError);
        txtError.setBounds(10, 130, 71, 30);

        jLabel1.setText("Constante");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 20, 71, 16);

        jLabel2.setText("Grado 1");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(100, 20, 71, 16);

        jLabel3.setText("Grado 2");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(190, 20, 71, 16);

        jLabel4.setText("Grado 3");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(280, 20, 71, 16);

        jLabel5.setText("Grado 4");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(370, 20, 71, 16);

        jLabel6.setText("Grado 5");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(460, 20, 71, 16);

        jLabel7.setText("Error Relativo");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(10, 100, 71, 16);

        jLabel9.setText("Grado 6");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(550, 20, 71, 16);

        TxtDecimales.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtDecimalesKeyTyped(evt);
            }
        });
        getContentPane().add(TxtDecimales);
        TxtDecimales.setBounds(100, 130, 64, 30);

        jLabel10.setText("Decimales");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(100, 100, 60, 16);

        txtIntervaloX.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIntervaloXKeyTyped(evt);
            }
        });
        getContentPane().add(txtIntervaloX);
        txtIntervaloX.setBounds(150, 290, 70, 30);

        txtIntervaloY.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIntervaloYKeyTyped(evt);
            }
        });
        getContentPane().add(txtIntervaloY);
        txtIntervaloY.setBounds(440, 290, 70, 30);

        jLabel11.setText("Intervalo y");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(440, 260, 70, 20);

        jLabel13.setText("Intervalo x");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(150, 260, 70, 20);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Iteraciones", "Raiz", "Error"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setFocusable(false);
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(20, 400, 590, 230);

        CbTrigonometrico.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Seno", "coseno", "tangente", "cotangente", "secante", "cosecante" }));
        getContentPane().add(CbTrigonometrico);
        CbTrigonometrico.setBounds(10, 210, 110, 22);

        jLabel12.setText("Trigonometricas");
        getContentPane().add(jLabel12);
        jLabel12.setBounds(10, 180, 110, 20);

        jLabel14.setText("Tipo de Dato");
        getContentPane().add(jLabel14);
        jLabel14.setBounds(10, 280, 110, 16);

        cbTipoDato.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "Grados", "Grados, minutos, segundos", "Radianes", "PiRadianes" }));
        cbTipoDato.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbTipoDatoItemStateChanged(evt);
            }
        });
        getContentPane().add(cbTipoDato);
        cbTipoDato.setBounds(10, 310, 110, 30);

        txtMinutosX.setEnabled(false);
        txtMinutosX.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMinutosXKeyTyped(evt);
            }
        });
        getContentPane().add(txtMinutosX);
        txtMinutosX.setBounds(250, 290, 64, 30);

        txtSegundosX.setEnabled(false);
        txtSegundosX.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSegundosXKeyTyped(evt);
            }
        });
        getContentPane().add(txtSegundosX);
        txtSegundosX.setBounds(340, 290, 64, 30);

        txtMinutosY.setEnabled(false);
        txtMinutosY.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMinutosYKeyTyped(evt);
            }
        });
        getContentPane().add(txtMinutosY);
        txtMinutosY.setBounds(530, 290, 64, 30);

        txtSegundosY.setEnabled(false);
        txtSegundosY.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSegundosYKeyTyped(evt);
            }
        });
        getContentPane().add(txtSegundosY);
        txtSegundosY.setBounds(620, 290, 64, 30);

        lblsegundosy.setText("Segundo (y)");
        getContentPane().add(lblsegundosy);
        lblsegundosy.setBounds(620, 260, 70, 16);

        lblminutosy.setText("Minutos (y)");
        getContentPane().add(lblminutosy);
        lblminutosy.setBounds(530, 260, 70, 16);

        lblsegundosx.setText("Segundo (x)");
        getContentPane().add(lblsegundosx);
        lblsegundosx.setBounds(340, 260, 70, 16);

        lblminutosx.setText("Minutos (x)");
        getContentPane().add(lblminutosx);
        lblminutosx.setBounds(250, 260, 70, 16);

        Btnlimpiar.setText("Limpiar");
        getContentPane().add(Btnlimpiar);
        Btnlimpiar.setBounds(620, 430, 72, 22);

        txtDivisionPiradianX.setEnabled(false);
        txtDivisionPiradianX.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDivisionPiradianXKeyTyped(evt);
            }
        });
        getContentPane().add(txtDivisionPiradianX);
        txtDivisionPiradianX.setBounds(150, 340, 70, 30);

        txtDivisionPiradianY.setEnabled(false);
        txtDivisionPiradianY.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDivisionPiradianYKeyTyped(evt);
            }
        });
        getContentPane().add(txtDivisionPiradianY);
        txtDivisionPiradianY.setBounds(440, 340, 70, 30);
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(150, 330, 70, 10);
        getContentPane().add(jSeparator2);
        jSeparator2.setBounds(440, 330, 70, 10);

        lblpiY.setText("X œÄ");
        getContentPane().add(lblpiY);
        lblpiY.setBounds(520, 320, 40, 30);

        lblpiX.setText("X œÄ");
        getContentPane().add(lblpiX);
        lblpiX.setBounds(230, 320, 30, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtConstanteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtConstanteKeyTyped
        // TODO add your handling code here:
        digito(evt);
        char c = evt.getKeyChar();
        if (c == '.' && txtConstante.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_txtConstanteKeyTyped

    private void txtGrado1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtGrado1KeyTyped
        // TODO add your handling code here:
        digito(evt);
        char c = evt.getKeyChar();
        if (c == '.' && txtGrado1.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_txtGrado1KeyTyped

    private void txtGrado2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtGrado2KeyTyped
        // TODO add your handling code here:
        digito(evt);
        char c = evt.getKeyChar();
        if (c == '.' && txtGrado2.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_txtGrado2KeyTyped

    private void txtGrado3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtGrado3KeyTyped
        // TODO add your handling code here:
        digito(evt);
        char c = evt.getKeyChar();
        if (c == '.' && txtGrado3.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_txtGrado3KeyTyped

    private void txtGrado4KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtGrado4KeyTyped
        // TODO add your handling code here:
        digito(evt);
        char c = evt.getKeyChar();
        if (c == '.' && txtGrado4.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_txtGrado4KeyTyped

    private void txtGrado5KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtGrado5KeyTyped
        // TODO add your handling code here:
        digito(evt);
        char c = evt.getKeyChar();
        if (c == '.' && txtGrado5.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_txtGrado5KeyTyped

    private void txtGrado6KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtGrado6KeyTyped
        // TODO add your handling code here:
        digito(evt);
        char c = evt.getKeyChar();
        if (c == '.' && txtGrado6.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_txtGrado6KeyTyped

    private void TxtDecimalesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtDecimalesKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }

    }//GEN-LAST:event_TxtDecimalesKeyTyped

    private void txtErrorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtErrorKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) && c != '.') {
            evt.consume();
        }

        if (c == '.' && txtError.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_txtErrorKeyTyped

    private void txtIntervaloXKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIntervaloXKeyTyped
        // TODO add your handling code here:
        digito(evt);
        char c = evt.getKeyChar();
        if (c == '.' && txtIntervaloX.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_txtIntervaloXKeyTyped

    private void txtIntervaloYKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIntervaloYKeyTyped
        // TODO add your handling code here:
        digito(evt);
        char c = evt.getKeyChar();
        if (c == '.' && txtIntervaloY.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_txtIntervaloYKeyTyped

    private void BtnResolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnResolverActionPerformed
        // TODO add your handling code here:
        try {
            if (!error(txtConstante) || !error(TxtDecimales) || !error(txtError) || !error(txtGrado1) || !error(txtGrado2) || !error(txtGrado3) || !error(txtGrado4) || !error(txtGrado5) || !error(txtGrado6) || !error(txtIntervaloX) || !error(txtIntervaloY)) {

                JOptionPane.showMessageDialog(this, "Rellene todos los campos\n Algunos campos siguen vacios", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (txtDivisionPiradianX.isEnabled() && txtDivisionPiradianY.isEnabled()) {
                constante = Double.parseDouble(txtConstante.getText());
                ErrorI = Double.parseDouble(txtError.getText());
                Grado1 = Double.parseDouble(txtGrado1.getText());
                decimales = Integer.parseInt(TxtDecimales.getText());
                Grado2 = Double.parseDouble(txtGrado2.getText());
                Grado3 = Double.parseDouble(txtGrado3.getText());
                Grado4 = Double.parseDouble(txtGrado4.getText());
                Grado5 = Double.parseDouble(txtGrado5.getText());
                Grado6 = Double.parseDouble(txtGrado6.getText());
                x = Double.parseDouble(txtIntervaloX.getText());
                y = Double.parseDouble(txtIntervaloY.getText());
                DivPiRaX = Integer.parseInt(txtDivisionPiradianX.getText());
                DivPiRaY = Double.parseDouble(txtDivisionPiradianY.getText());

                PiradX = (x / DivPiRaX) * Math.PI;
                PiradY = (y / DivPiRaY) * Math.PI;
            } else if (!txtMinutosX.isEnabled() && !txtSegundosX.isEnabled()) {
                constante = Double.parseDouble(txtConstante.getText());
                ErrorI = Double.parseDouble(txtError.getText());
                Grado1 = Double.parseDouble(txtGrado1.getText());
                decimales = Integer.parseInt(TxtDecimales.getText());
                Grado2 = Double.parseDouble(txtGrado2.getText());
                Grado3 = Double.parseDouble(txtGrado3.getText());
                Grado4 = Double.parseDouble(txtGrado4.getText());
                Grado5 = Double.parseDouble(txtGrado5.getText());
                Grado6 = Double.parseDouble(txtGrado6.getText());
                x = Double.parseDouble(txtIntervaloX.getText());
                y = Double.parseDouble(txtIntervaloY.getText());

                System.out.println("entro sin");
            } //este es en caso de que esten activados los campos de minutos y segundos
            else {
                constante = Double.parseDouble(txtConstante.getText());
                ErrorI = Double.parseDouble(txtError.getText());
                Grado1 = Double.parseDouble(txtGrado1.getText());
                decimales = Integer.parseInt(TxtDecimales.getText());
                Grado2 = Double.parseDouble(txtGrado2.getText());
                Grado3 = Double.parseDouble(txtGrado3.getText());
                Grado4 = Double.parseDouble(txtGrado4.getText());
                Grado5 = Double.parseDouble(txtGrado5.getText());
                Grado6 = Double.parseDouble(txtGrado6.getText());
                x = Double.parseDouble(txtIntervaloX.getText());
                y = Double.parseDouble(txtIntervaloY.getText());
                minutosX = Integer.parseInt(txtMinutosX.getText());
                segundosX = Double.parseDouble(txtSegundosX.getText());
                minutosY = Integer.parseInt(txtMinutosY.getText());
                segundosY = Double.parseDouble(txtSegundosY.getText());

                sumaX = x + ((minutosX / 1) * (1 / 60)) + (segundosX / 3600);
                sumaY = y + ((minutosY / 1) * (1 / 60)) + (segundosY / 3600);
                //3600 x/divx*pi

            }
            if (cbTipoDato.getSelectedIndex() == 4) {
                //Pi Radian
                switch (CbTrigonometrico.getSelectedIndex()) {
                    case 0:
                        if (CbTrigonometrico.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "escoja una funcion trigonometrica", "AVISO", JOptionPane.WARNING_MESSAGE);
                        }
                        break;
                    case 1:
                        //seno
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        intx = PiradX;
                        System.out.println(intx);
                        comp = Math.sin((constante
                                + (Grado1 * Math.pow(intx, 1))
                                + (Grado2 * Math.pow(intx, 2))
                                + (Grado3 * Math.pow(intx, 3))
                                + (Grado4 * Math.pow(intx, 4))
                                + (Grado5 * Math.pow(intx, 5))
                                + (Grado6 * Math.pow(intx, 6))));

                        inty = PiradY;
                        System.out.println(inty);
                        comp2 = Math.sin((constante)
                                + (Grado1 * Math.pow(inty, 1))
                                + (Grado2 * Math.pow(inty, 2))
                                + (Grado3 * Math.pow(inty, 3))
                                + (Grado4 * Math.pow(inty, 4))
                                + (Grado5 * Math.pow(inty, 5))
                                + (Grado6 * Math.pow(inty, 6)));

                        aprox = comp * comp2;
                        //**********************************************************************************************************************************************************
                        if (comp == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + x + " contiene la Raiz" + comp, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        if (comp2 == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + y + " contiene la Raiz" + comp2, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        if (aprox > 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos no contiene las respuesta", "Aviso", JOptionPane.WARNING_MESSAGE);

                            if (JOptionPane.showConfirmDialog(this, "¬øquiere seguir con las comprobaciones?", "aviso", JOptionPane.INFORMATION_MESSAGE) == JOptionPane.NO_OPTION) {
                                JOptionPane.showMessageDialog(this, "Saliendo", "aviso", JOptionPane.INFORMATION_MESSAGE);
                                BtnResolver.setEnabled(false);
                                return;
                            } else {
                                JOptionPane.showMessageDialog(this, "se haran mas de 100 comprobaciones y se arrojara el resultado final", "aviso", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                        if (aprox < 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos si contiene las respuesta", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        }
                        //**********************************************************************************************************************************************************
                        pm = (((comp * inty) - (comp2 * intx)) / (comp - comp2));
                        System.out.println("iteracion :" + i);
                        Fpm = String.format("%." + decimales + "f", pm);
                        System.out.println(Fpm);
                        do {
                            intx = pm;
                            i++;
                            System.out.println("iteracion :" + i);
                            comp = Math.sin((constante + (Grado1 * Math.pow(intx, 1)) + (Grado2 * Math.pow(intx, 2)) + (Grado3 * Math.pow(intx, 3)) + (Grado4 * Math.pow(intx, 4))
                                    + (Grado5 * Math.pow(intx, 5)) + (Grado6 * Math.pow(intx, 6))));

                            comp2 = Math.sin((constante)
                                    + (Grado1 * Math.pow(inty, 1))
                                    + (Grado2 * Math.pow(inty, 2))
                                    + (Grado3 * Math.pow(inty, 3))
                                    + (Grado4 * Math.pow(inty, 4))
                                    + (Grado5 * Math.pow(inty, 5))
                                    + (Grado6 * Math.pow(inty, 6)));

                            pm = inty - (((comp2 * intx) - (comp2 * inty)) / ((comp - comp2)));
                            Fpm = String.format("%." + decimales + "f", pm);
                            System.out.println(Fpm);
                            error = ((pm - intx) / pm) * 100;
                            error = abs(error);
                            Ferror = String.format("%." + decimales + "f", error);
                            System.out.println(Ferror);
                            //**********************************************************************************************************************************************************

                            if (error == 0) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error si es igual a 0: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (error <= ErrorI) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en menor o igual: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (i == 100) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en iteraciones: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se alcanzo el maximo de iteraciones y no se encontro la raiz", "no alcanzo", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            //**********************************************************************************************************************************************************

                        } while (salir == false);

                        break;
                    case 2:
                        //coseno
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        intx = PiradX;
                        System.out.println(intx);
                        comp = Math.cos(constante
                                + (Grado1 * Math.pow(intx, 1))
                                + (Grado2 * Math.pow(intx, 2))
                                + (Grado3 * Math.pow(intx, 3))
                                + (Grado4 * Math.pow(intx, 4))
                                + (Grado5 * Math.pow(intx, 5))
                                + (Grado6 * Math.pow(intx, 6)));

                        inty = PiradY;
                        System.out.println(inty);
                        comp2 = Math.cos((constante)
                                + (Grado1 * Math.pow(inty, 1))
                                + (Grado2 * Math.pow(inty, 2))
                                + (Grado3 * Math.pow(inty, 3))
                                + (Grado4 * Math.pow(inty, 4))
                                + (Grado5 * Math.pow(inty, 5))
                                + (Grado6 * Math.pow(inty, 6)));

                        aprox = comp * comp2;
                        //**********************************************************************************************************************************************************
                        if (comp == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + x + " contiene la Raiz" + comp, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        if (comp2 == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + y + " contiene la Raiz" + comp2, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        if (aprox > 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos no contiene las respuesta", "Aviso", JOptionPane.WARNING_MESSAGE);

                            if (JOptionPane.showConfirmDialog(this, "¬øquiere seguir con las comprobaciones?", "aviso", JOptionPane.INFORMATION_MESSAGE) == JOptionPane.NO_OPTION) {
                                JOptionPane.showMessageDialog(this, "Saliendo", "aviso", JOptionPane.INFORMATION_MESSAGE);
                                BtnResolver.setEnabled(false);
                                return;
                            } else {
                                JOptionPane.showMessageDialog(this, "se haran mas de 100 comprobaciones y se arrojara el resultado final", "aviso", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                        if (aprox < 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos si contiene las respuesta", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        }
                        //**********************************************************************************************************************************************************
                        pm = (((comp * inty) - (comp2 * intx)) / (comp - comp2));
                        System.out.println("iteracion :" + i);
                        Fpm = String.format("%." + decimales + "f", pm);
                        System.out.println(Fpm);
                        do {
                            intx = pm;
                            i++;
                            System.out.println("iteracion :" + i);
                            comp = Math.cos((constante
                                    + (Grado1 * Math.pow(intx, 1))
                                    + (Grado2 * Math.pow(intx, 2))
                                    + (Grado3 * Math.pow(intx, 3))
                                    + (Grado4 * Math.pow(intx, 4))
                                    + (Grado5 * Math.pow(intx, 5))
                                    + (Grado6 * Math.pow(intx, 6))));

                            comp2 = Math.cos((constante)
                                    + (Grado1 * Math.pow(inty, 1))
                                    + (Grado2 * Math.pow(inty, 2))
                                    + (Grado3 * Math.pow(inty, 3))
                                    + (Grado4 * Math.pow(inty, 4))
                                    + (Grado5 * Math.pow(inty, 5))
                                    + (Grado6 * Math.pow(inty, 6)));

                            pm = inty - (((comp2 * intx) - (comp2 * inty)) / ((comp - comp2)));
                            Fpm = String.format("%." + decimales + "f", pm);
                            System.out.println(Fpm);
                            error = ((pm - intx) / pm) * 100;
                            error = abs(error);
                            Ferror = String.format("%." + decimales + "f", error);
                            System.out.println(Ferror);
                            //**********************************************************************************************************************************************************

                            if (error == 0) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error si es igual a 0: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (error <= ErrorI) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en menor o igual: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (i == 100) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en iteraciones: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se alcanzo el maximo de iteraciones y no se encontro la raiz", "no alcanzo", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            //**********************************************************************************************************************************************************

                        } while (salir == false);
                        break;
                    case 3:
                        //tangente
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        intx = PiradX;
                        System.out.println(intx);

                        comp = Math.tan((constante
                                + (Grado1 * Math.pow(intx, 1))
                                + (Grado2 * Math.pow(intx, 2))
                                + (Grado3 * Math.pow(intx, 3))
                                + (Grado4 * Math.pow(intx, 4))
                                + (Grado5 * Math.pow(intx, 5))
                                + (Grado6 * Math.pow(intx, 6))));
                        inty = PiradY;
                        System.out.println(inty);
                        comp2 = Math.tan((constante)
                                + (Grado1 * Math.pow(inty, 1))
                                + (Grado2 * Math.pow(inty, 2))
                                + (Grado3 * Math.pow(inty, 3))
                                + (Grado4 * Math.pow(inty, 4))
                                + (Grado5 * Math.pow(inty, 5))
                                + (Grado6 * Math.pow(inty, 6)));

                        aprox = comp * comp2;
                        //**********************************************************************************************************************************************************
                        if (comp == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + x + " contiene la Raiz" + comp, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        if (comp2 == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + y + " contiene la Raiz" + comp2, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        if (aprox > 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos no contiene las respuesta", "Aviso", JOptionPane.WARNING_MESSAGE);

                            if (JOptionPane.showConfirmDialog(this, "¬øquiere seguir con las comprobaciones?", "aviso", JOptionPane.INFORMATION_MESSAGE) == JOptionPane.NO_OPTION) {
                                JOptionPane.showMessageDialog(this, "Saliendo", "aviso", JOptionPane.INFORMATION_MESSAGE);
                                BtnResolver.setEnabled(false);
                                return;
                            } else {
                                JOptionPane.showMessageDialog(this, "se haran mas de 100 comprobaciones y se arrojara el resultado final", "aviso", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                        if (aprox < 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos si contiene las respuesta", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        }
                        //**********************************************************************************************************************************************************
                        pm = (((comp * inty) - (comp2 * intx)) / (comp - comp2));
                        System.out.println("iteracion :" + i);
                        Fpm = String.format("%." + decimales + "f", pm);
                        System.out.println(Fpm);
                        do {
                            intx = pm;
                            i++;
                            System.out.println("iteracion :" + i);
                            comp = Math.tan((constante
                                    + (Grado1 * Math.pow(intx, 1))
                                    + (Grado2 * Math.pow(intx, 2))
                                    + (Grado3 * Math.pow(intx, 3))
                                    + (Grado4 * Math.pow(intx, 4))
                                    + (Grado5 * Math.pow(intx, 5))
                                    + (Grado6 * Math.pow(intx, 6))));

                            comp2 = Math.tan((constante)
                                    + (Grado1 * Math.pow(inty, 1))
                                    + (Grado2 * Math.pow(inty, 2))
                                    + (Grado3 * Math.pow(inty, 3))
                                    + (Grado4 * Math.pow(inty, 4))
                                    + (Grado5 * Math.pow(inty, 5))
                                    + (Grado6 * Math.pow(inty, 6)));

                            pm = inty - (((comp2 * intx) - (comp2 * inty)) / ((comp - comp2)));
                            Fpm = String.format("%." + decimales + "f", pm);
                            System.out.println(Fpm);
                            error = ((pm - intx) / pm) * 100;
                            error = abs(error);
                            Ferror = String.format("%." + decimales + "f", error);
                            System.out.println(Ferror);
                            //**********************************************************************************************************************************************************

                            if (error == 0) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error si es igual a 0: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (error <= ErrorI) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en menor o igual: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (i == 100) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en iteraciones: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se alcanzo el maximo de iteraciones y no se encontro la raiz", "no alcanzo", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            //**********************************************************************************************************************************************************

                        } while (salir == false);
                        break;
                    case 4:
                        //cotangente
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        intx = PiradX;

                        comp = 1 / (Math.tan((constante
                                + (Grado1 * Math.pow(intx, 1))
                                + (Grado2 * Math.pow(intx, 2))
                                + (Grado3 * Math.pow(intx, 3))
                                + (Grado4 * Math.pow(intx, 4))
                                + (Grado5 * Math.pow(intx, 5))
                                + (Grado6 * Math.pow(intx, 6)))));

                        inty = PiradY;

                        comp2 = 1 / (Math.tan((constante)
                                + (Grado1 * Math.pow(inty, 1))
                                + (Grado2 * Math.pow(inty, 2))
                                + (Grado3 * Math.pow(inty, 3))
                                + (Grado4 * Math.pow(inty, 4))
                                + (Grado5 * Math.pow(inty, 5))
                                + (Grado6 * Math.pow(inty, 6))));

                        aprox = comp * comp2;
                        //**********************************************************************************************************************************************************
                        if (comp == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + x + " contiene la Raiz" + comp, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        if (comp2 == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + y + " contiene la Raiz" + comp2, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        if (aprox > 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos no contiene las respuesta", "Aviso", JOptionPane.WARNING_MESSAGE);

                            if (JOptionPane.showConfirmDialog(this, "¬øquiere seguir con las comprobaciones?", "aviso", JOptionPane.INFORMATION_MESSAGE) == JOptionPane.NO_OPTION) {
                                JOptionPane.showMessageDialog(this, "Saliendo", "aviso", JOptionPane.INFORMATION_MESSAGE);
                                BtnResolver.setEnabled(false);
                                return;
                            } else {
                                JOptionPane.showMessageDialog(this, "se haran mas de 100 comprobaciones y se arrojara el resultado final", "aviso", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                        if (aprox < 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos si contiene las respuesta", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        }
                        //**********************************************************************************************************************************************************
                        pm = (((comp * inty) - (comp2 * intx)) / (comp - comp2));
                        System.out.println("iteracion :" + i);
                        Fpm = String.format("%." + decimales + "f", pm);
                        System.out.println(Fpm);
                        do {
                            intx = pm;
                            i++;
                            System.out.println("iteracion :" + i);
                            comp = 1 / (Math.tan((constante
                                    + (Grado1 * Math.pow(intx, 1))
                                    + (Grado2 * Math.pow(intx, 2))
                                    + (Grado3 * Math.pow(intx, 3))
                                    + (Grado4 * Math.pow(intx, 4))
                                    + (Grado5 * Math.pow(intx, 5))
                                    + (Grado6 * Math.pow(intx, 6)))));

                            comp2 = 1 / (Math.tan((constante)
                                    + (Grado1 * Math.pow(inty, 1))
                                    + (Grado2 * Math.pow(inty, 2))
                                    + (Grado3 * Math.pow(inty, 3))
                                    + (Grado4 * Math.pow(inty, 4))
                                    + (Grado5 * Math.pow(inty, 5))
                                    + (Grado6 * Math.pow(inty, 6))));

                            pm = inty - (((comp2 * intx) - (comp2 * inty)) / ((comp - comp2)));
                            Fpm = String.format("%." + decimales + "f", pm);
                            System.out.println(Fpm);
                            error = ((pm - intx) / pm) * 100;
                            error = abs(error);
                            Ferror = String.format("%." + decimales + "f", error);
                            System.out.println(Ferror);
                            //**********************************************************************************************************************************************************

                            if (error == 0) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error si es igual a 0: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (error <= ErrorI) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en menor o igual: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (i == 100) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en iteraciones: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se alcanzo el maximo de iteraciones y no se encontro la raiz", "no alcanzo", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            //**********************************************************************************************************************************************************

                        } while (salir == false);
                        break;
                    case 5:
                        //secante
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        intx = PiradX;
                        comp = 1 / (Math.cos((constante
                                + (Grado1 * Math.pow(intx, 1))
                                + (Grado2 * Math.pow(intx, 2))
                                + (Grado3 * Math.pow(intx, 3))
                                + (Grado4 * Math.pow(intx, 4))
                                + (Grado5 * Math.pow(intx, 5))
                                + (Grado6 * Math.pow(intx, 6)))));

                        inty = PiradY;

                        comp2 = 1 / (Math.cos((constante)
                                + (Grado1 * Math.pow(inty, 1))
                                + (Grado2 * Math.pow(inty, 2))
                                + (Grado3 * Math.pow(inty, 3))
                                + (Grado4 * Math.pow(inty, 4))
                                + (Grado5 * Math.pow(inty, 5))
                                + (Grado6 * Math.pow(inty, 6))));

                        aprox = comp * comp2;
                        //**********************************************************************************************************************************************************
                        if (comp == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + x + " contiene la Raiz" + comp, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        if (comp2 == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + y + " contiene la Raiz" + comp2, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        if (aprox > 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos no contiene las respuesta", "Aviso", JOptionPane.WARNING_MESSAGE);

                            if (JOptionPane.showConfirmDialog(this, "¬øquiere seguir con las comprobaciones?", "aviso", JOptionPane.INFORMATION_MESSAGE) == JOptionPane.NO_OPTION) {
                                JOptionPane.showMessageDialog(this, "Saliendo", "aviso", JOptionPane.INFORMATION_MESSAGE);
                                BtnResolver.setEnabled(false);
                                return;
                            } else {
                                JOptionPane.showMessageDialog(this, "se haran mas de 100 comprobaciones y se arrojara el resultado final", "aviso", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                        if (aprox < 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos si contiene las respuesta", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        }
                        //**********************************************************************************************************************************************************
                        pm = (((comp * inty) - (comp2 * intx)) / (comp - comp2));
                        System.out.println("iteracion :" + i);
                        Fpm = String.format("%." + decimales + "f", pm);
                        System.out.println(Fpm);
                        do {
                            intx = pm;
                            i++;
                            System.out.println("iteracion :" + i);
                            comp = 1 / (Math.cos((constante
                                    + (Grado1 * Math.pow(intx, 1))
                                    + (Grado2 * Math.pow(intx, 2))
                                    + (Grado3 * Math.pow(intx, 3))
                                    + (Grado4 * Math.pow(intx, 4))
                                    + (Grado5 * Math.pow(intx, 5))
                                    + (Grado6 * Math.pow(intx, 6)))));

                            comp2 = 1 / (Math.cos((constante)
                                    + (Grado1 * Math.pow(inty, 1))
                                    + (Grado2 * Math.pow(inty, 2))
                                    + (Grado3 * Math.pow(inty, 3))
                                    + (Grado4 * Math.pow(inty, 4))
                                    + (Grado5 * Math.pow(inty, 5))
                                    + (Grado6 * Math.pow(inty, 6))));

                            pm = inty - (((comp2 * intx) - (comp2 * inty)) / ((comp - comp2)));
                            Fpm = String.format("%." + decimales + "f", pm);
                            System.out.println(Fpm);
                            error = ((pm - intx) / pm) * 100;
                            error = abs(error);
                            Ferror = String.format("%." + decimales + "f", error);
                            System.out.println(Ferror);
                            //**********************************************************************************************************************************************************

                            if (error == 0) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error si es igual a 0: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (error <= ErrorI) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en menor o igual: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (i == 100) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en iteraciones: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se alcanzo el maximo de iteraciones y no se encontro la raiz", "no alcanzo", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            //**********************************************************************************************************************************************************

                        } while (salir == false);
                        break;
                    case 6:
                        //cosecante
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        intx = PiradX;

                        comp = 1 / (Math.sin((constante
                                + (Grado1 * Math.pow(intx, 1))
                                + (Grado2 * Math.pow(intx, 2))
                                + (Grado3 * Math.pow(intx, 3))
                                + (Grado4 * Math.pow(intx, 4))
                                + (Grado5 * Math.pow(intx, 5))
                                + (Grado6 * Math.pow(intx, 6)))));

                        inty = PiradY;

                        comp2 = 1 / (Math.sin((constante)
                                + (Grado1 * Math.pow(inty, 1))
                                + (Grado2 * Math.pow(inty, 2))
                                + (Grado3 * Math.pow(inty, 3))
                                + (Grado4 * Math.pow(inty, 4))
                                + (Grado5 * Math.pow(inty, 5))
                                + (Grado6 * Math.pow(inty, 6))));
                        ;

                        aprox = comp * comp2;
                        //**********************************************************************************************************************************************************
                        if (comp == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + x + " contiene la Raiz" + comp, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        if (comp2 == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + y + " contiene la Raiz" + comp2, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        if (aprox > 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos no contiene las respuesta", "Aviso", JOptionPane.WARNING_MESSAGE);

                            if (JOptionPane.showConfirmDialog(this, "¬øquiere seguir con las comprobaciones?", "aviso", JOptionPane.INFORMATION_MESSAGE) == JOptionPane.NO_OPTION) {
                                JOptionPane.showMessageDialog(this, "Saliendo", "aviso", JOptionPane.INFORMATION_MESSAGE);
                                BtnResolver.setEnabled(false);
                                return;
                            } else {
                                JOptionPane.showMessageDialog(this, "se haran mas de 100 comprobaciones y se arrojara el resultado final", "aviso", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                        if (aprox < 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos si contiene las respuesta", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        }
                        //**********************************************************************************************************************************************************
                        pm = (((comp * inty) - (comp2 * intx)) / (comp - comp2));
                        System.out.println("iteracion :" + i);
                        Fpm = String.format("%." + decimales + "f", pm);
                        System.out.println(Fpm);
                        do {
                            intx = pm;
                            i++;
                            System.out.println("iteracion :" + i);
                            comp = 1 / (Math.sin((constante
                                    + (Grado1 * Math.pow(intx, 1))
                                    + (Grado2 * Math.pow(intx, 2))
                                    + (Grado3 * Math.pow(intx, 3))
                                    + (Grado4 * Math.pow(intx, 4))
                                    + (Grado5 * Math.pow(intx, 5))
                                    + (Grado6 * Math.pow(intx, 6)))));

                            comp2 = 1 / (Math.sin((constante)
                                    + (Grado1 * Math.pow(inty, 1))
                                    + (Grado2 * Math.pow(inty, 2))
                                    + (Grado3 * Math.pow(inty, 3))
                                    + (Grado4 * Math.pow(inty, 4))
                                    + (Grado5 * Math.pow(inty, 5))
                                    + (Grado6 * Math.pow(inty, 6))));

                            pm = inty - (((comp2 * intx) - (comp2 * inty)) / ((comp - comp2)));
                            Fpm = String.format("%." + decimales + "f", pm);
                            System.out.println(Fpm);
                            error = ((pm - intx) / pm) * 100;
                            error = abs(error);
                            Ferror = String.format("%." + decimales + "f", error);
                            System.out.println(Ferror);
                            //**********************************************************************************************************************************************************

                            if (error == 0) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error si es igual a 0: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (error <= ErrorI) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en menor o igual: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (i == 100) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en iteraciones: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se alcanzo el maximo de iteraciones y no se encontro la raiz", "no alcanzo", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            //**********************************************************************************************************************************************************

                        } while (salir == false);
                        break;

                    default:
                        System.err.println("error");
                }
            }
            if (cbTipoDato.getSelectedIndex() == 2) {
                //grados minutos y segundo
                switch (CbTrigonometrico.getSelectedIndex()) {
                    case 0:
                        if (CbTrigonometrico.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "escoja una funcion trigonometrica", "AVISO", JOptionPane.WARNING_MESSAGE);
                        }
                        break;
                    case 1:
                        //seno
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        intx = Math.toRadians(sumaX);

                        comp = Math.sin((constante
                                + (Grado1 * Math.pow(intx, 1))
                                + (Grado2 * Math.pow(intx, 2))
                                + (Grado3 * Math.pow(intx, 3))
                                + (Grado4 * Math.pow(intx, 4))
                                + (Grado5 * Math.pow(intx, 5))
                                + (Grado6 * Math.pow(intx, 6))));

                        inty = Math.toRadians(sumaY);

                        comp2 = Math.sin((constante)
                                + (Grado1 * Math.pow(inty, 1))
                                + (Grado2 * Math.pow(inty, 2))
                                + (Grado3 * Math.pow(inty, 3))
                                + (Grado4 * Math.pow(inty, 4))
                                + (Grado5 * Math.pow(inty, 5))
                                + (Grado6 * Math.pow(inty, 6)));

                        aprox = comp * comp2;
                        //**********************************************************************************************************************************************************
                        if (comp == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + x + " contiene la Raiz" + comp, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        if (comp2 == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + y + " contiene la Raiz" + comp2, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        if (aprox > 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos no contiene las respuesta", "Aviso", JOptionPane.WARNING_MESSAGE);

                            if (JOptionPane.showConfirmDialog(this, "¬øquiere seguir con las comprobaciones?", "aviso", JOptionPane.INFORMATION_MESSAGE) == JOptionPane.NO_OPTION) {
                                JOptionPane.showMessageDialog(this, "Saliendo", "aviso", JOptionPane.INFORMATION_MESSAGE);
                                BtnResolver.setEnabled(false);
                                return;
                            } else {
                                JOptionPane.showMessageDialog(this, "se haran mas de 100 comprobaciones y se arrojara el resultado final", "aviso", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                        if (aprox < 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos si contiene las respuesta", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        }
                        //**********************************************************************************************************************************************************
                        pm = (((comp * inty) - (comp2 * intx)) / (comp - comp2));
                        System.out.println("iteracion :" + i);
                        Fpm = String.format("%." + decimales + "f", pm);
                        System.out.println(Fpm);
                        do {
                            intx = pm;
                            i++;
                            System.out.println("iteracion :" + i);
                            comp = Math.sin((constante + (Grado1 * Math.pow(intx, 1)) + (Grado2 * Math.pow(intx, 2)) + (Grado3 * Math.pow(intx, 3)) + (Grado4 * Math.pow(intx, 4))
                                    + (Grado5 * Math.pow(intx, 5)) + (Grado6 * Math.pow(intx, 6))));

                            comp2 = Math.sin((constante)
                                    + (Grado1 * Math.pow(inty, 1))
                                    + (Grado2 * Math.pow(inty, 2))
                                    + (Grado3 * Math.pow(inty, 3))
                                    + (Grado4 * Math.pow(inty, 4))
                                    + (Grado5 * Math.pow(inty, 5))
                                    + (Grado6 * Math.pow(inty, 6)));

                            pm = inty - (((comp2 * intx) - (comp2 * inty)) / ((comp - comp2)));
                            Fpm = String.format("%." + decimales + "f", pm);
                            System.out.println(Fpm);
                            error = ((pm - intx) / pm) * 100;
                            error = abs(error);
                            Ferror = String.format("%." + decimales + "f", error);
                            System.out.println(Ferror);
                            //**********************************************************************************************************************************************************

                            if (error == 0) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error si es igual a 0: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (error <= ErrorI) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en menor o igual: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (i == 10000) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en iteraciones: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se alcanzo el maximo de iteraciones y no se encontro la raiz", "no alcanzo", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            //**********************************************************************************************************************************************************

                        } while (salir == false);

                        break;
                    case 2:
                        //coseno
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        intx = Math.toRadians(sumaX);

                        comp = Math.cos((constante
                                + (Grado1 * Math.pow(intx, 1))
                                + (Grado2 * Math.pow(intx, 2))
                                + (Grado3 * Math.pow(intx, 3))
                                + (Grado4 * Math.pow(intx, 4))
                                + (Grado5 * Math.pow(intx, 5))
                                + (Grado6 * Math.pow(intx, 6))));

                        inty = Math.toRadians(sumaY);

                        comp2 = Math.cos((constante)
                                + (Grado1 * Math.pow(inty, 1))
                                + (Grado2 * Math.pow(inty, 2))
                                + (Grado3 * Math.pow(inty, 3))
                                + (Grado4 * Math.pow(inty, 4))
                                + (Grado5 * Math.pow(inty, 5))
                                + (Grado6 * Math.pow(inty, 6)));

                        aprox = comp * comp2;
                        //**********************************************************************************************************************************************************
                        if (comp == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + x + " contiene la Raiz" + comp, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        if (comp2 == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + y + " contiene la Raiz" + comp2, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        if (aprox > 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos no contiene las respuesta", "Aviso", JOptionPane.WARNING_MESSAGE);

                            if (JOptionPane.showConfirmDialog(this, "¬øquiere seguir con las comprobaciones?", "aviso", JOptionPane.INFORMATION_MESSAGE) == JOptionPane.NO_OPTION) {
                                JOptionPane.showMessageDialog(this, "Saliendo", "aviso", JOptionPane.INFORMATION_MESSAGE);
                                BtnResolver.setEnabled(false);
                                return;
                            } else {
                                JOptionPane.showMessageDialog(this, "se haran mas de 100 comprobaciones y se arrojara el resultado final", "aviso", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                        if (aprox < 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos si contiene las respuesta", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        }
                        //**********************************************************************************************************************************************************
                        pm = (((comp * inty) - (comp2 * intx)) / (comp - comp2));
                        System.out.println("iteracion :" + i);
                        Fpm = String.format("%." + decimales + "f", pm);
                        System.out.println(Fpm);
                        do {
                            intx = pm;
                            i++;
                            System.out.println("iteracion :" + i);
                            comp = Math.cos((constante + (Grado1 * Math.pow(intx, 1)) + (Grado2 * Math.pow(intx, 2)) + (Grado3 * Math.pow(intx, 3)) + (Grado4 * Math.pow(intx, 4))
                                    + (Grado5 * Math.pow(intx, 5)) + (Grado6 * Math.pow(intx, 6))));

                            comp2 = Math.cos((constante) + (Grado1 * Math.pow(inty, 1)) + (Grado2 * Math.pow(inty, 2)) + (Grado3 * Math.pow(inty, 3)) + (Grado4 * Math.pow(inty, 4))
                                    + (Grado5 * Math.pow(inty, 5)) + (Grado6 * Math.pow(inty, 6)));
                            pm = inty - (((comp2 * intx) - (comp2 * inty)) / ((comp - comp2)));
                            Fpm = String.format("%." + decimales + "f", pm);
                            System.out.println(Fpm);
                            error = ((pm - intx) / pm) * 100;
                            error = abs(error);
                            Ferror = String.format("%." + decimales + "f", error);
                            System.out.println(Ferror);
                            //**********************************************************************************************************************************************************

                            if (error == 0) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error si es igual a 0: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (error <= ErrorI) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en menor o igual: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (i == 100) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en iteraciones: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se alcanzo el maximo de iteraciones y no se encontro la raiz", "no alcanzo", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            //**********************************************************************************************************************************************************

                        } while (salir == false);
                        break;
                    case 3:
                        //tangente
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        intx = Math.toRadians(sumaX);

                        comp = Math.tan((constante
                                + (Grado1 * Math.pow(intx, 1))
                                + (Grado2 * Math.pow(intx, 2))
                                + (Grado3 * Math.pow(intx, 3))
                                + (Grado4 * Math.pow(intx, 4))
                                + (Grado5 * Math.pow(intx, 5))
                                + (Grado6 * Math.pow(intx, 6))));

                        inty = Math.toRadians(sumaY);

                        comp2 = Math.tan((constante)
                                + (Grado1 * Math.pow(inty, 1))
                                + (Grado2 * Math.pow(inty, 2))
                                + (Grado3 * Math.pow(inty, 3))
                                + (Grado4 * Math.pow(inty, 4))
                                + (Grado5 * Math.pow(inty, 5))
                                + (Grado6 * Math.pow(inty, 6)));

                        aprox = comp * comp2;
                        //**********************************************************************************************************************************************************
                        if (comp == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + x + " contiene la Raiz" + comp, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        if (comp2 == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + y + " contiene la Raiz" + comp2, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        if (aprox > 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos no contiene las respuesta", "Aviso", JOptionPane.WARNING_MESSAGE);

                            if (JOptionPane.showConfirmDialog(this, "¬øquiere seguir con las comprobaciones?", "aviso", JOptionPane.INFORMATION_MESSAGE) == JOptionPane.NO_OPTION) {
                                JOptionPane.showMessageDialog(this, "Saliendo", "aviso", JOptionPane.INFORMATION_MESSAGE);
                                BtnResolver.setEnabled(false);
                                return;
                            } else {
                                JOptionPane.showMessageDialog(this, "se haran mas de 100 comprobaciones y se arrojara el resultado final", "aviso", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                        if (aprox < 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos si contiene las respuesta", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        }
                        //**********************************************************************************************************************************************************
                        pm = (((comp * inty) - (comp2 * intx)) / (comp - comp2));
                        System.out.println("iteracion :" + i);
                        Fpm = String.format("%." + decimales + "f", pm);
                        System.out.println(Fpm);
                        do {
                            intx = pm;
                            i++;
                            System.out.println("iteracion :" + i);
                            comp = Math.tan((constante
                                    + (Grado1 * Math.pow(intx, 1))
                                    + (Grado2 * Math.pow(intx, 2))
                                    + (Grado3 * Math.pow(intx, 3))
                                    + (Grado4 * Math.pow(intx, 4))
                                    + (Grado5 * Math.pow(intx, 5))
                                    + (Grado6 * Math.pow(intx, 6))));

                            comp2 = Math.tan((constante)
                                    + (Grado1 * Math.pow(inty, 1))
                                    + (Grado2 * Math.pow(inty, 2))
                                    + (Grado3 * Math.pow(inty, 3))
                                    + (Grado4 * Math.pow(inty, 4))
                                    + (Grado5 * Math.pow(inty, 5))
                                    + (Grado6 * Math.pow(inty, 6)));

                            pm = inty - (((comp2 * intx) - (comp2 * inty)) / ((comp - comp2)));
                            Fpm = String.format("%." + decimales + "f", pm);
                            System.out.println(Fpm);
                            error = ((pm - intx) / pm) * 100;
                            error = abs(error);
                            Ferror = String.format("%." + decimales + "f", error);
                            System.out.println(Ferror);
                            //**********************************************************************************************************************************************************

                            if (error == 0) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error si es igual a 0: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (error <= ErrorI) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en menor o igual: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (i == 100) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en iteraciones: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se alcanzo el maximo de iteraciones y no se encontro la raiz", "no alcanzo", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            //**********************************************************************************************************************************************************

                        } while (salir == false);
                        break;
                    case 4:
                        //cotangente
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        intx = Math.toRadians(x);

                        comp = 1 / (Math.tan((constante
                                + (Grado1 * Math.pow(intx, 1))
                                + (Grado2 * Math.pow(intx, 2))
                                + (Grado3 * Math.pow(intx, 3))
                                + (Grado4 * Math.pow(intx, 4))
                                + (Grado5 * Math.pow(intx, 5))
                                + (Grado6 * Math.pow(intx, 6)))));

                        inty = Math.toRadians(y);

                        comp2 = 1 / (Math.tan((constante)
                                + (Grado1 * Math.pow(inty, 1))
                                + (Grado2 * Math.pow(inty, 2))
                                + (Grado3 * Math.pow(inty, 3))
                                + (Grado4 * Math.pow(inty, 4))
                                + (Grado5 * Math.pow(inty, 5))
                                + (Grado6 * Math.pow(inty, 6))));

                        aprox = comp * comp2;
                        //**********************************************************************************************************************************************************
                        if (comp == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + x + " contiene la Raiz" + comp, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        if (comp2 == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + y + " contiene la Raiz" + comp2, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        if (aprox > 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos no contiene las respuesta", "Aviso", JOptionPane.WARNING_MESSAGE);

                            if (JOptionPane.showConfirmDialog(this, "¬øquiere seguir con las comprobaciones?", "aviso", JOptionPane.INFORMATION_MESSAGE) == JOptionPane.NO_OPTION) {
                                JOptionPane.showMessageDialog(this, "Saliendo", "aviso", JOptionPane.INFORMATION_MESSAGE);
                                BtnResolver.setEnabled(false);
                                return;
                            } else {
                                JOptionPane.showMessageDialog(this, "se haran mas de 100 comprobaciones y se arrojara el resultado final", "aviso", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                        if (aprox < 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos si contiene las respuesta", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        }
                        //**********************************************************************************************************************************************************
                        pm = (((comp * inty) - (comp2 * intx)) / (comp - comp2));
                        System.out.println("iteracion :" + i);
                        Fpm = String.format("%." + decimales + "f", pm);
                        System.out.println(Fpm);
                        do {
                            intx = pm;
                            i++;
                            System.out.println("iteracion :" + i);
                            comp = 1 / (Math.tan((constante
                                    + (Grado1 * Math.pow(intx, 1))
                                    + (Grado2 * Math.pow(intx, 2))
                                    + (Grado3 * Math.pow(intx, 3))
                                    + (Grado4 * Math.pow(intx, 4))
                                    + (Grado5 * Math.pow(intx, 5))
                                    + (Grado6 * Math.pow(intx, 6)))));

                            comp2 = 1 / (Math.tan((constante)
                                    + (Grado1 * Math.pow(inty, 1))
                                    + (Grado2 * Math.pow(inty, 2))
                                    + (Grado3 * Math.pow(inty, 3))
                                    + (Grado4 * Math.pow(inty, 4))
                                    + (Grado5 * Math.pow(inty, 5))
                                    + (Grado6 * Math.pow(inty, 6))));

                            pm = inty - (((comp2 * intx) - (comp2 * inty)) / ((comp - comp2)));
                            Fpm = String.format("%." + decimales + "f", pm);
                            System.out.println(Fpm);
                            error = ((pm - intx) / pm) * 100;
                            error = abs(error);
                            Ferror = String.format("%." + decimales + "f", error);
                            System.out.println(Ferror);
                            //**********************************************************************************************************************************************************

                            if (error == 0) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error si es igual a 0: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (error <= ErrorI) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en menor o igual: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (i == 100) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en iteraciones: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se alcanzo el maximo de iteraciones y no se encontro la raiz", "no alcanzo", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            //**********************************************************************************************************************************************************

                        } while (salir == false);
                        break;
                    case 5://secante
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        intx = Math.toRadians(x);

                        comp = 1 / (Math.cos((constante
                                + (Grado1 * Math.pow(intx, 1))
                                + (Grado2 * Math.pow(intx, 2))
                                + (Grado3 * Math.pow(intx, 3))
                                + (Grado4 * Math.pow(intx, 4))
                                + (Grado5 * Math.pow(intx, 5))
                                + (Grado6 * Math.pow(intx, 6)))));

                        inty = Math.toRadians(y);

                        comp2 = 1 / (Math.cos((constante)
                                + (Grado1 * Math.pow(inty, 1))
                                + (Grado2 * Math.pow(inty, 2))
                                + (Grado3 * Math.pow(inty, 3))
                                + (Grado4 * Math.pow(inty, 4))
                                + (Grado5 * Math.pow(inty, 5))
                                + (Grado6 * Math.pow(inty, 6))));

                        aprox = comp * comp2;
                        //**********************************************************************************************************************************************************
                        if (comp == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + x + " contiene la Raiz" + comp, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        if (comp2 == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + y + " contiene la Raiz" + comp2, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        if (aprox > 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos no contiene las respuesta", "Aviso", JOptionPane.WARNING_MESSAGE);

                            if (JOptionPane.showConfirmDialog(this, "¬øquiere seguir con las comprobaciones?", "aviso", JOptionPane.INFORMATION_MESSAGE) == JOptionPane.NO_OPTION) {
                                JOptionPane.showMessageDialog(this, "Saliendo", "aviso", JOptionPane.INFORMATION_MESSAGE);
                                BtnResolver.setEnabled(false);
                                return;
                            } else {
                                JOptionPane.showMessageDialog(this, "se haran mas de 100 comprobaciones y se arrojara el resultado final", "aviso", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                        if (aprox < 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos si contiene las respuesta", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        }
                        //**********************************************************************************************************************************************************
                        pm = (((comp * inty) - (comp2 * intx)) / (comp - comp2));
                        System.out.println("iteracion :" + i);
                        Fpm = String.format("%." + decimales + "f", pm);
                        System.out.println(Fpm);
                        do {
                            intx = pm;
                            i++;
                            System.out.println("iteracion :" + i);
                            comp = 1 / (Math.cos((constante
                                    + (Grado1 * Math.pow(intx, 1))
                                    + (Grado2 * Math.pow(intx, 2))
                                    + (Grado3 * Math.pow(intx, 3))
                                    + (Grado4 * Math.pow(intx, 4))
                                    + (Grado5 * Math.pow(intx, 5))
                                    + (Grado6 * Math.pow(intx, 6)))));

                            comp2 = 1 / (Math.cos((constante)
                                    + (Grado1 * Math.pow(inty, 1))
                                    + (Grado2 * Math.pow(inty, 2))
                                    + (Grado3 * Math.pow(inty, 3))
                                    + (Grado4 * Math.pow(inty, 4))
                                    + (Grado5 * Math.pow(inty, 5))
                                    + (Grado6 * Math.pow(inty, 6))));

                            pm = inty - (((comp2 * intx) - (comp2 * inty)) / ((comp - comp2)));
                            Fpm = String.format("%." + decimales + "f", pm);
                            System.out.println(Fpm);
                            error = ((pm - intx) / pm) * 100;
                            error = abs(error);
                            Ferror = String.format("%." + decimales + "f", error);
                            System.out.println(Ferror);
                            //**********************************************************************************************************************************************************

                            if (error == 0) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error si es igual a 0: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (error <= ErrorI) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en menor o igual: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (i == 100) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en iteraciones: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se alcanzo el maximo de iteraciones y no se encontro la raiz", "no alcanzo", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            //**********************************************************************************************************************************************************

                        } while (salir == false);
                        break;
                    case 6:
                        //cosecante
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        intx = Math.toRadians(x);

                        comp = 1 / (Math.sin((constante
                                + (Grado1 * Math.pow(intx, 1))
                                + (Grado2 * Math.pow(intx, 2))
                                + (Grado3 * Math.pow(intx, 3))
                                + (Grado4 * Math.pow(intx, 4))
                                + (Grado5 * Math.pow(intx, 5))
                                + (Grado6 * Math.pow(intx, 6)))));

                        inty = Math.toRadians(y);

                        comp2 = 1 / (Math.sin((constante)
                                + (Grado1 * Math.pow(inty, 1))
                                + (Grado2 * Math.pow(inty, 2))
                                + (Grado3 * Math.pow(inty, 3))
                                + (Grado4 * Math.pow(inty, 4))
                                + (Grado5 * Math.pow(inty, 5))
                                + (Grado6 * Math.pow(inty, 6))));

                        aprox = comp * comp2;
                        //**********************************************************************************************************************************************************
                        if (comp == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + x + " contiene la Raiz" + comp, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        if (comp2 == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + y + " contiene la Raiz" + comp2, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        if (aprox > 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos no contiene las respuesta", "Aviso", JOptionPane.WARNING_MESSAGE);

                            if (JOptionPane.showConfirmDialog(this, "¬øquiere seguir con las comprobaciones?", "aviso", JOptionPane.INFORMATION_MESSAGE) == JOptionPane.NO_OPTION) {
                                JOptionPane.showMessageDialog(this, "Saliendo", "aviso", JOptionPane.INFORMATION_MESSAGE);
                                BtnResolver.setEnabled(false);
                                return;
                            } else {
                                JOptionPane.showMessageDialog(this, "se haran mas de 100 comprobaciones y se arrojara el resultado final", "aviso", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                        if (aprox < 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos si contiene las respuesta", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        }
                        //**********************************************************************************************************************************************************
                        pm = (((comp * inty) - (comp2 * intx)) / (comp - comp2));
                        System.out.println("iteracion :" + i);
                        Fpm = String.format("%." + decimales + "f", pm);
                        System.out.println(Fpm);
                        do {
                            intx = pm;
                            i++;
                            System.out.println("iteracion :" + i);
                            comp = 1 / (Math.sin((constante
                                    + (Grado1 * Math.pow(intx, 1))
                                    + (Grado2 * Math.pow(intx, 2))
                                    + (Grado3 * Math.pow(intx, 3))
                                    + (Grado4 * Math.pow(intx, 4))
                                    + (Grado5 * Math.pow(intx, 5))
                                    + (Grado6 * Math.pow(intx, 6)))));

                            comp2 = 1 / (Math.sin((constante)
                                    + (Grado1 * Math.pow(inty, 1))
                                    + (Grado2 * Math.pow(inty, 2))
                                    + (Grado3 * Math.pow(inty, 3))
                                    + (Grado4 * Math.pow(inty, 4))
                                    + (Grado5 * Math.pow(inty, 5))
                                    + (Grado6 * Math.pow(inty, 6))));

                            pm = inty - (((comp2 * intx) - (comp2 * inty)) / ((comp - comp2)));
                            Fpm = String.format("%." + decimales + "f", pm);
                            System.out.println(Fpm);
                            error = ((pm - intx) / pm) * 100;
                            error = abs(error);
                            Ferror = String.format("%." + decimales + "f", error);
                            System.out.println(Ferror);
                            //**********************************************************************************************************************************************************

                            if (error == 0) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error si es igual a 0: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (error <= ErrorI) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en menor o igual: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (i == 100) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en iteraciones: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se alcanzo el maximo de iteraciones y no se encontro la raiz", "no alcanzo", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            //**********************************************************************************************************************************************************

                        } while (salir == false);
                        break;

                    default:
                        System.err.println("error");
                }
            }

            if (cbTipoDato.getSelectedIndex() == 1) {
                //grados
                switch (CbTrigonometrico.getSelectedIndex()) {
                    case 0:
                        if (CbTrigonometrico.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "escoja una funcion trigonometrica", "AVISO", JOptionPane.WARNING_MESSAGE);
                        }
                        break;
                    case 1:
                        //seno
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        intx = Math.toRadians(x);

                        comp = Math.sin((constante
                                + (Grado1 * Math.pow(intx, 1))
                                + (Grado2 * Math.pow(intx, 2))
                                + (Grado3 * Math.pow(intx, 3))
                                + (Grado4 * Math.pow(intx, 4))
                                + (Grado5 * Math.pow(intx, 5))
                                + (Grado6 * Math.pow(intx, 6))));

                        inty = Math.toRadians(y);

                        comp2 = Math.sin((constante)
                                + (Grado1 * Math.pow(inty, 1))
                                + (Grado2 * Math.pow(inty, 2))
                                + (Grado3 * Math.pow(inty, 3))
                                + (Grado4 * Math.pow(inty, 4))
                                + (Grado5 * Math.pow(inty, 5))
                                + (Grado6 * Math.pow(inty, 6)));

                        aprox = comp * comp2;
                        //**********************************************************************************************************************************************************
                        if (comp == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + x + " contiene la Raiz" + comp, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        if (comp2 == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + y + " contiene la Raiz" + comp2, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        if (aprox > 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos no contiene las respuesta", "Aviso", JOptionPane.WARNING_MESSAGE);

                            if (JOptionPane.showConfirmDialog(this, "¬øquiere seguir con las comprobaciones?", "aviso", JOptionPane.INFORMATION_MESSAGE) == JOptionPane.NO_OPTION) {
                                JOptionPane.showMessageDialog(this, "Saliendo", "aviso", JOptionPane.INFORMATION_MESSAGE);
                                BtnResolver.setEnabled(false);
                                return;
                            } else {
                                JOptionPane.showMessageDialog(this, "se haran mas de 100 comprobaciones y se arrojara el resultado final", "aviso", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                        if (aprox < 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos si contiene las respuesta", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        }
                        //**********************************************************************************************************************************************************
                        pm = (((comp * inty) - (comp2 * intx)) / (comp - comp2));
                        System.out.println("iteracion :" + i);
                        Fpm = String.format("%." + decimales + "f", pm);
                        System.out.println(Fpm);
                        do {
                            intx = pm;
                            i++;
                            System.out.println("iteracion :" + i);
                            comp = Math.sin((constante + (Grado1 * Math.pow(intx, 1)) + (Grado2 * Math.pow(intx, 2)) + (Grado3 * Math.pow(intx, 3)) + (Grado4 * Math.pow(intx, 4))
                                    + (Grado5 * Math.pow(intx, 5)) + (Grado6 * Math.pow(intx, 6))));

                            comp2 = Math.sin((constante)
                                    + (Grado1 * Math.pow(inty, 1))
                                    + (Grado2 * Math.pow(inty, 2))
                                    + (Grado3 * Math.pow(inty, 3))
                                    + (Grado4 * Math.pow(inty, 4))
                                    + (Grado5 * Math.pow(inty, 5))
                                    + (Grado6 * Math.pow(inty, 6)));

                            pm = inty - (((comp2 * intx) - (comp2 * inty)) / ((comp - comp2)));
                            Fpm = String.format("%." + decimales + "f", pm);
                            System.out.println(Fpm);
                            error = ((pm - intx) / pm) * 100;
                            error = abs(error);
                            Ferror = String.format("%." + decimales + "f", error);
                            System.out.println(Ferror);
                            //**********************************************************************************************************************************************************

                            if (error == 0) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error si es igual a 0: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (error <= ErrorI) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en menor o igual: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (i == 100) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en iteraciones: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se alcanzo el maximo de iteraciones y no se encontro la raiz", "no alcanzo", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            //**********************************************************************************************************************************************************

                        } while (salir == false);
                        break;
                    case 2:
                        //coseno
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        intx = Math.toRadians(x);

                        comp = Math.cos((constante
                                + (Grado1 * Math.pow(intx, 1))
                                + (Grado2 * Math.pow(intx, 2))
                                + (Grado3 * Math.pow(intx, 3))
                                + (Grado4 * Math.pow(intx, 4))
                                + (Grado5 * Math.pow(intx, 5))
                                + (Grado6 * Math.pow(intx, 6))));

                        inty = Math.toRadians(y);

                        comp2 = Math.cos((constante)
                                + (Grado1 * Math.pow(inty, 1))
                                + (Grado2 * Math.pow(inty, 2))
                                + (Grado3 * Math.pow(inty, 3))
                                + (Grado4 * Math.pow(inty, 4))
                                + (Grado5 * Math.pow(inty, 5))
                                + (Grado6 * Math.pow(inty, 6)));

                        aprox = comp * comp2;
                        //**********************************************************************************************************************************************************
                        if (comp == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + x + " contiene la Raiz" + comp, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        if (comp2 == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + y + " contiene la Raiz" + comp2, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        if (aprox > 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos no contiene las respuesta", "Aviso", JOptionPane.WARNING_MESSAGE);

                            if (JOptionPane.showConfirmDialog(this, "¬øquiere seguir con las comprobaciones?", "aviso", JOptionPane.INFORMATION_MESSAGE) == JOptionPane.NO_OPTION) {
                                JOptionPane.showMessageDialog(this, "Saliendo", "aviso", JOptionPane.INFORMATION_MESSAGE);
                                BtnResolver.setEnabled(false);
                                return;
                            } else {
                                JOptionPane.showMessageDialog(this, "se haran mas de 100 comprobaciones y se arrojara el resultado final", "aviso", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                        if (aprox < 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos si contiene las respuesta", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        }
                        //**********************************************************************************************************************************************************
                        pm = (((comp * inty) - (comp2 * intx)) / (comp - comp2));
                        System.out.println("iteracion :" + i);
                        Fpm = String.format("%." + decimales + "f", pm);
                        System.out.println(Fpm);
                        do {
                            intx = pm;
                            i++;
                            System.out.println("iteracion :" + i);
                            comp = Math.cos((constante + (Grado1 * Math.pow(intx, 1)) + (Grado2 * Math.pow(intx, 2)) + (Grado3 * Math.pow(intx, 3)) + (Grado4 * Math.pow(intx, 4))
                                    + (Grado5 * Math.pow(intx, 5)) + (Grado6 * Math.pow(intx, 6))));

                            comp2 = Math.cos((constante) + (Grado1 * Math.pow(inty, 1)) + (Grado2 * Math.pow(inty, 2)) + (Grado3 * Math.pow(inty, 3)) + (Grado4 * Math.pow(inty, 4))
                                    + (Grado5 * Math.pow(inty, 5)) + (Grado6 * Math.pow(inty, 6)));
                            pm = inty - (((comp2 * intx) - (comp2 * inty)) / ((comp - comp2)));
                            Fpm = String.format("%." + decimales + "f", pm);
                            System.out.println(Fpm);
                            error = ((pm - intx) / pm) * 100;
                            error = abs(error);
                            Ferror = String.format("%." + decimales + "f", error);
                            System.out.println(Ferror);
                            //**********************************************************************************************************************************************************

                            if (error == 0) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error si es igual a 0: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (error <= ErrorI) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en menor o igual: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (i == 100) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en iteraciones: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se alcanzo el maximo de iteraciones y no se encontro la raiz", "no alcanzo", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            //**********************************************************************************************************************************************************

                        } while (salir == false);
                        break;
                    case 3:
                        //tangente
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        intx = Math.toRadians(x);

                        comp = Math.tan((constante
                                + (Grado1 * Math.pow(intx, 1))
                                + (Grado2 * Math.pow(intx, 2))
                                + (Grado3 * Math.pow(intx, 3))
                                + (Grado4 * Math.pow(intx, 4))
                                + (Grado5 * Math.pow(intx, 5))
                                + (Grado6 * Math.pow(intx, 6))));

                        inty = Math.toRadians(y);

                        comp2 = Math.tan((constante)
                                + (Grado1 * Math.pow(inty, 1))
                                + (Grado2 * Math.pow(inty, 2))
                                + (Grado3 * Math.pow(inty, 3))
                                + (Grado4 * Math.pow(inty, 4))
                                + (Grado5 * Math.pow(inty, 5))
                                + (Grado6 * Math.pow(inty, 6)));

                        aprox = comp * comp2;
                        //**********************************************************************************************************************************************************
                        if (comp == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + x + " contiene la Raiz" + comp, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        if (comp2 == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + y + " contiene la Raiz" + comp2, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        if (aprox > 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos no contiene las respuesta", "Aviso", JOptionPane.WARNING_MESSAGE);

                            if (JOptionPane.showConfirmDialog(this, "¬øquiere seguir con las comprobaciones?", "aviso", JOptionPane.INFORMATION_MESSAGE) == JOptionPane.NO_OPTION) {
                                JOptionPane.showMessageDialog(this, "Saliendo", "aviso", JOptionPane.INFORMATION_MESSAGE);
                                BtnResolver.setEnabled(false);
                                return;
                            } else {
                                JOptionPane.showMessageDialog(this, "se haran mas de 100 comprobaciones y se arrojara el resultado final", "aviso", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                        if (aprox < 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos si contiene las respuesta", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        }
                        //**********************************************************************************************************************************************************
                        pm = (((comp * inty) - (comp2 * intx)) / (comp - comp2));
                        System.out.println("iteracion :" + i);
                        Fpm = String.format("%." + decimales + "f", pm);
                        System.out.println(Fpm);
                        do {
                            intx = pm;
                            i++;
                            System.out.println("iteracion :" + i);
                            comp = Math.tan((constante
                                    + (Grado1 * Math.pow(intx, 1))
                                    + (Grado2 * Math.pow(intx, 2))
                                    + (Grado3 * Math.pow(intx, 3))
                                    + (Grado4 * Math.pow(intx, 4))
                                    + (Grado5 * Math.pow(intx, 5))
                                    + (Grado6 * Math.pow(intx, 6))));

                            comp2 = Math.tan((constante)
                                    + (Grado1 * Math.pow(inty, 1))
                                    + (Grado2 * Math.pow(inty, 2))
                                    + (Grado3 * Math.pow(inty, 3))
                                    + (Grado4 * Math.pow(inty, 4))
                                    + (Grado5 * Math.pow(inty, 5))
                                    + (Grado6 * Math.pow(inty, 6)));

                            pm = inty - (((comp2 * intx) - (comp2 * inty)) / ((comp - comp2)));
                            Fpm = String.format("%." + decimales + "f", pm);
                            System.out.println(Fpm);
                            error = ((pm - intx) / pm) * 100;
                            error = abs(error);
                            Ferror = String.format("%." + decimales + "f", error);
                            System.out.println(Ferror);
                            //**********************************************************************************************************************************************************

                            if (error == 0) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error si es igual a 0: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (error <= ErrorI) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en menor o igual: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (i == 100) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en iteraciones: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se alcanzo el maximo de iteraciones y no se encontro la raiz", "no alcanzo", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            //**********************************************************************************************************************************************************

                        } while (salir == false);
                        break;
                    case 4:
                        //cotangente
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        intx = Math.toRadians(x);

                        comp = 1 / (Math.tan((constante
                                + (Grado1 * Math.pow(intx, 1))
                                + (Grado2 * Math.pow(intx, 2))
                                + (Grado3 * Math.pow(intx, 3))
                                + (Grado4 * Math.pow(intx, 4))
                                + (Grado5 * Math.pow(intx, 5))
                                + (Grado6 * Math.pow(intx, 6)))));

                        inty = Math.toRadians(y);

                        comp2 = 1 / (Math.tan((constante)
                                + (Grado1 * Math.pow(inty, 1))
                                + (Grado2 * Math.pow(inty, 2))
                                + (Grado3 * Math.pow(inty, 3))
                                + (Grado4 * Math.pow(inty, 4))
                                + (Grado5 * Math.pow(inty, 5))
                                + (Grado6 * Math.pow(inty, 6))));

                        aprox = comp * comp2;
                        //**********************************************************************************************************************************************************
                        if (comp == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + x + " contiene la Raiz" + comp, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        if (comp2 == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + y + " contiene la Raiz" + comp2, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        if (aprox > 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos no contiene las respuesta", "Aviso", JOptionPane.WARNING_MESSAGE);

                            if (JOptionPane.showConfirmDialog(this, "¬øquiere seguir con las comprobaciones?", "aviso", JOptionPane.INFORMATION_MESSAGE) == JOptionPane.NO_OPTION) {
                                JOptionPane.showMessageDialog(this, "Saliendo", "aviso", JOptionPane.INFORMATION_MESSAGE);
                                BtnResolver.setEnabled(false);
                                return;
                            } else {
                                JOptionPane.showMessageDialog(this, "se haran mas de 100 comprobaciones y se arrojara el resultado final", "aviso", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                        if (aprox < 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos si contiene las respuesta", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        }
                        //**********************************************************************************************************************************************************
                        pm = (((comp * inty) - (comp2 * intx)) / (comp - comp2));
                        System.out.println("iteracion :" + i);
                        Fpm = String.format("%." + decimales + "f", pm);
                        System.out.println(Fpm);
                        do {
                            intx = pm;
                            i++;
                            System.out.println("iteracion :" + i);
                            comp = 1 / (Math.tan((constante
                                    + (Grado1 * Math.pow(intx, 1))
                                    + (Grado2 * Math.pow(intx, 2))
                                    + (Grado3 * Math.pow(intx, 3))
                                    + (Grado4 * Math.pow(intx, 4))
                                    + (Grado5 * Math.pow(intx, 5))
                                    + (Grado6 * Math.pow(intx, 6)))));

                            comp2 = 1 / (Math.tan((constante)
                                    + (Grado1 * Math.pow(inty, 1))
                                    + (Grado2 * Math.pow(inty, 2))
                                    + (Grado3 * Math.pow(inty, 3))
                                    + (Grado4 * Math.pow(inty, 4))
                                    + (Grado5 * Math.pow(inty, 5))
                                    + (Grado6 * Math.pow(inty, 6))));

                            pm = inty - (((comp2 * intx) - (comp2 * inty)) / ((comp - comp2)));
                            Fpm = String.format("%." + decimales + "f", pm);
                            System.out.println(Fpm);
                            error = ((pm - intx) / pm) * 100;
                            error = abs(error);
                            Ferror = String.format("%." + decimales + "f", error);
                            System.out.println(Ferror);
                            //**********************************************************************************************************************************************************

                            if (error == 0) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error si es igual a 0: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (error <= ErrorI) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en menor o igual: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (i == 100) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en iteraciones: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se alcanzo el maximo de iteraciones y no se encontro la raiz", "no alcanzo", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            //**********************************************************************************************************************************************************

                        } while (salir == false);
                        break;
                    case 5://secante
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        intx = Math.toRadians(x);

                        comp = 1 / (Math.cos((constante
                                + (Grado1 * Math.pow(intx, 1))
                                + (Grado2 * Math.pow(intx, 2))
                                + (Grado3 * Math.pow(intx, 3))
                                + (Grado4 * Math.pow(intx, 4))
                                + (Grado5 * Math.pow(intx, 5))
                                + (Grado6 * Math.pow(intx, 6)))));

                        inty = Math.toRadians(y);

                        comp2 = 1 / (Math.cos((constante)
                                + (Grado1 * Math.pow(inty, 1))
                                + (Grado2 * Math.pow(inty, 2))
                                + (Grado3 * Math.pow(inty, 3))
                                + (Grado4 * Math.pow(inty, 4))
                                + (Grado5 * Math.pow(inty, 5))
                                + (Grado6 * Math.pow(inty, 6))));

                        aprox = comp * comp2;
                        //**********************************************************************************************************************************************************
                        if (comp == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + x + " contiene la Raiz" + comp, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        if (comp2 == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + y + " contiene la Raiz" + comp2, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        if (aprox > 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos no contiene las respuesta", "Aviso", JOptionPane.WARNING_MESSAGE);

                            if (JOptionPane.showConfirmDialog(this, "¬øquiere seguir con las comprobaciones?", "aviso", JOptionPane.INFORMATION_MESSAGE) == JOptionPane.NO_OPTION) {
                                JOptionPane.showMessageDialog(this, "Saliendo", "aviso", JOptionPane.INFORMATION_MESSAGE);
                                BtnResolver.setEnabled(false);
                                return;
                            } else {
                                JOptionPane.showMessageDialog(this, "se haran mas de 100 comprobaciones y se arrojara el resultado final", "aviso", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                        if (aprox < 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos si contiene las respuesta", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        }
                        //**********************************************************************************************************************************************************
                        pm = (((comp * inty) - (comp2 * intx)) / (comp - comp2));
                        System.out.println("iteracion :" + i);
                        Fpm = String.format("%." + decimales + "f", pm);
                        System.out.println(Fpm);
                        do {
                            intx = pm;
                            i++;
                            System.out.println("iteracion :" + i);
                            comp = 1 / (Math.cos((constante
                                    + (Grado1 * Math.pow(intx, 1))
                                    + (Grado2 * Math.pow(intx, 2))
                                    + (Grado3 * Math.pow(intx, 3))
                                    + (Grado4 * Math.pow(intx, 4))
                                    + (Grado5 * Math.pow(intx, 5))
                                    + (Grado6 * Math.pow(intx, 6)))));

                            comp2 = 1 / (Math.cos((constante)
                                    + (Grado1 * Math.pow(inty, 1))
                                    + (Grado2 * Math.pow(inty, 2))
                                    + (Grado3 * Math.pow(inty, 3))
                                    + (Grado4 * Math.pow(inty, 4))
                                    + (Grado5 * Math.pow(inty, 5))
                                    + (Grado6 * Math.pow(inty, 6))));

                            pm = inty - (((comp2 * intx) - (comp2 * inty)) / ((comp - comp2)));
                            Fpm = String.format("%." + decimales + "f", pm);
                            System.out.println(Fpm);
                            error = ((pm - intx) / pm) * 100;
                            error = abs(error);
                            Ferror = String.format("%." + decimales + "f", error);
                            System.out.println(Ferror);
                            //**********************************************************************************************************************************************************

                            if (error == 0) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error si es igual a 0: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (error <= ErrorI) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en menor o igual: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (i == 100) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en iteraciones: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se alcanzo el maximo de iteraciones y no se encontro la raiz", "no alcanzo", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            //**********************************************************************************************************************************************************

                        } while (salir == false);
                        break;
                    case 6:
                        //cosecante
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        intx = Math.toRadians(x);

                        comp = 1 / (Math.sin((constante
                                + (Grado1 * Math.pow(intx, 1))
                                + (Grado2 * Math.pow(intx, 2))
                                + (Grado3 * Math.pow(intx, 3))
                                + (Grado4 * Math.pow(intx, 4))
                                + (Grado5 * Math.pow(intx, 5))
                                + (Grado6 * Math.pow(intx, 6)))));

                        inty = Math.toRadians(y);

                        comp2 = 1 / (Math.sin((constante)
                                + (Grado1 * Math.pow(inty, 1))
                                + (Grado2 * Math.pow(inty, 2))
                                + (Grado3 * Math.pow(inty, 3))
                                + (Grado4 * Math.pow(inty, 4))
                                + (Grado5 * Math.pow(inty, 5))
                                + (Grado6 * Math.pow(inty, 6))));

                        aprox = comp * comp2;
                        //**********************************************************************************************************************************************************
                        if (comp == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + x + " contiene la Raiz" + comp, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        if (comp2 == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + y + " contiene la Raiz" + comp2, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        if (aprox > 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos no contiene las respuesta", "Aviso", JOptionPane.WARNING_MESSAGE);

                            if (JOptionPane.showConfirmDialog(this, "¬øquiere seguir con las comprobaciones?", "aviso", JOptionPane.INFORMATION_MESSAGE) == JOptionPane.NO_OPTION) {
                                JOptionPane.showMessageDialog(this, "Saliendo", "aviso", JOptionPane.INFORMATION_MESSAGE);
                                BtnResolver.setEnabled(false);
                                return;
                            } else {
                                JOptionPane.showMessageDialog(this, "se haran mas de 100 comprobaciones y se arrojara el resultado final", "aviso", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                        if (aprox < 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos si contiene las respuesta", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        }
                        //**********************************************************************************************************************************************************
                        pm = (((comp * inty) - (comp2 * intx)) / (comp - comp2));
                        System.out.println("iteracion :" + i);
                        Fpm = String.format("%." + decimales + "f", pm);
                        System.out.println(Fpm);
                        do {
                            intx = pm;
                            i++;
                            System.out.println("iteracion :" + i);
                            comp = 1 / (Math.sin((constante
                                    + (Grado1 * Math.pow(intx, 1))
                                    + (Grado2 * Math.pow(intx, 2))
                                    + (Grado3 * Math.pow(intx, 3))
                                    + (Grado4 * Math.pow(intx, 4))
                                    + (Grado5 * Math.pow(intx, 5))
                                    + (Grado6 * Math.pow(intx, 6)))));

                            comp2 = 1 / (Math.sin((constante)
                                    + (Grado1 * Math.pow(inty, 1))
                                    + (Grado2 * Math.pow(inty, 2))
                                    + (Grado3 * Math.pow(inty, 3))
                                    + (Grado4 * Math.pow(inty, 4))
                                    + (Grado5 * Math.pow(inty, 5))
                                    + (Grado6 * Math.pow(inty, 6))));

                            pm = inty - (((comp2 * intx) - (comp2 * inty)) / ((comp - comp2)));
                            Fpm = String.format("%." + decimales + "f", pm);
                            System.out.println(Fpm);
                            error = ((pm - intx) / pm) * 100;
                            error = abs(error);
                            Ferror = String.format("%." + decimales + "f", error);
                            System.out.println(Ferror);
                            //**********************************************************************************************************************************************************

                            if (error == 0) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error si es igual a 0: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (error <= ErrorI) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en menor o igual: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (i == 100) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en iteraciones: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se alcanzo el maximo de iteraciones y no se encontro la raiz", "no alcanzo", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            //**********************************************************************************************************************************************************

                        } while (salir == false);
                        break;

                    default:
                        System.err.println("error");
                }
            }
            if (cbTipoDato.getSelectedIndex() == 3) {
                switch (CbTrigonometrico.getSelectedIndex()) {
                    case 0:
                        if (CbTrigonometrico.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "escoja una funcion trigonometrica", "AVISO", JOptionPane.WARNING_MESSAGE);
                        }
                        break;
                    case 1:
                        //seno
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        intx = x;

                        comp = Math.sin((constante + (Grado1 * Math.pow(intx, 1)) + (Grado2 * Math.pow(intx, 2)) + (Grado3 * Math.pow(intx, 3)) + (Grado4 * Math.pow(intx, 4))
                                + (Grado5 * Math.pow(intx, 5)) + (Grado6 * Math.pow(intx, 6))));

                        inty = y;

                        comp2 = Math.sin((constante) + (Grado1 * Math.pow(inty, 1)) + (Grado2 * Math.pow(inty, 2)) + (Grado3 * Math.pow(inty, 3)) + (Grado4 * Math.pow(inty, 4))
                                + (Grado5 * Math.pow(inty, 5)) + (Grado6 * Math.pow(inty, 6)));

                        aprox = comp * comp2;
                        //**********************************************************************************************************************************************************
                        if (comp == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + x + " contiene la Raiz" + comp, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        if (comp2 == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + y + " contiene la Raiz" + comp2, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        if (aprox > 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos no contiene las respuesta", "Aviso", JOptionPane.WARNING_MESSAGE);

                            if (JOptionPane.showConfirmDialog(this, "¬øquiere seguir con las comprobaciones?", "aviso", JOptionPane.INFORMATION_MESSAGE) == JOptionPane.NO_OPTION) {
                                JOptionPane.showMessageDialog(this, "Saliendo", "aviso", JOptionPane.INFORMATION_MESSAGE);
                                BtnResolver.setEnabled(false);
                                return;
                            } else {
                                JOptionPane.showMessageDialog(this, "se haran mas de 100 comprobaciones y se arrojara el resultado final", "aviso", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                        if (aprox < 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos si contiene las respuesta", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        }
                        //**********************************************************************************************************************************************************
                        pm = (((comp * inty) - (comp2 * intx)) / (comp - comp2));
                        System.out.println("iteracion :" + i);
                        Fpm = String.format("%." + decimales + "f", pm);
                        System.out.println(Fpm);
                        do {
                            intx = pm;
                            i++;
                            System.out.println("iteracion :" + i);
                            comp = Math.sin((constante + (Grado1 * Math.pow(intx, 1)) + (Grado2 * Math.pow(intx, 2)) + (Grado3 * Math.pow(intx, 3)) + (Grado4 * Math.pow(intx, 4))
                                    + (Grado5 * Math.pow(intx, 5)) + (Grado6 * Math.pow(intx, 6))));

                            comp2 = Math.sin((constante) + (Grado1 * Math.pow(inty, 1)) + (Grado2 * Math.pow(inty, 2)) + (Grado3 * Math.pow(inty, 3)) + (Grado4 * Math.pow(inty, 4))
                                    + (Grado5 * Math.pow(inty, 5)) + (Grado6 * Math.pow(inty, 6)));
                            pm = inty - (((comp2 * intx) - (comp2 * inty)) / ((comp - comp2)));
                            Fpm = String.format("%." + decimales + "f", pm);
                            System.out.println(Fpm);
                            error = ((pm - intx) / pm) * 100;
                            error = abs(error);
                            Ferror = String.format("%." + decimales + "f", error);
                            System.out.println(Ferror);
                            //**********************************************************************************************************************************************************

                            if (error == 0) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error si es igual a 0: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (error <= ErrorI) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en menor o igual: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (i == 100) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en iteraciones: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se alcanzo el maximo de iteraciones y no se encontro la raiz", "no alcanzo", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            //**********************************************************************************************************************************************************

                        } while (salir == false);
                        break;

                    case 2:
                        //coseno
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        intx = x;

                        comp = Math.cos((constante + (Grado1 * Math.pow(intx, 1)) + (Grado2 * Math.pow(intx, 2)) + (Grado3 * Math.pow(intx, 3)) + (Grado4 * Math.pow(intx, 4))
                                + (Grado5 * Math.pow(intx, 5)) + (Grado6 * Math.pow(intx, 6))));

                        inty = y;

                        comp2 = Math.cos((constante) + (Grado1 * Math.pow(inty, 1)) + (Grado2 * Math.pow(inty, 2)) + (Grado3 * Math.pow(inty, 3)) + (Grado4 * Math.pow(inty, 4))
                                + (Grado5 * Math.pow(inty, 5)) + (Grado6 * Math.pow(inty, 6)));

                        aprox = comp * comp2;
                        //**********************************************************************************************************************************************************
                        if (comp == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + x + " contiene la Raiz" + comp, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        if (comp2 == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + y + " contiene la Raiz" + comp2, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        if (aprox > 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos no contiene las respuesta", "Aviso", JOptionPane.WARNING_MESSAGE);

                            if (JOptionPane.showConfirmDialog(this, "¬øquiere seguir con las comprobaciones?", "aviso", JOptionPane.INFORMATION_MESSAGE) == JOptionPane.NO_OPTION) {
                                JOptionPane.showMessageDialog(this, "Saliendo", "aviso", JOptionPane.INFORMATION_MESSAGE);
                                BtnResolver.setEnabled(false);
                                return;
                            } else {
                                JOptionPane.showMessageDialog(this, "se haran mas de 100 comprobaciones y se arrojara el resultado final", "aviso", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                        if (aprox < 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos si contiene las respuesta", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        }
                        //**********************************************************************************************************************************************************
                        pm = (((comp * inty) - (comp2 * intx)) / (comp - comp2));
                        System.out.println("iteracion :" + i);
                        Fpm = String.format("%." + decimales + "f", pm);
                        System.out.println(Fpm);
                        do {
                            intx = pm;
                            i++;
                            System.out.println("iteracion :" + i);
                            comp = Math.cos((constante + (Grado1 * Math.pow(intx, 1)) + (Grado2 * Math.pow(intx, 2)) + (Grado3 * Math.pow(intx, 3)) + (Grado4 * Math.pow(intx, 4))
                                    + (Grado5 * Math.pow(intx, 5)) + (Grado6 * Math.pow(intx, 6))));

                            comp2 = Math.cos((constante) + (Grado1 * Math.pow(inty, 1)) + (Grado2 * Math.pow(inty, 2)) + (Grado3 * Math.pow(inty, 3)) + (Grado4 * Math.pow(inty, 4))
                                    + (Grado5 * Math.pow(inty, 5)) + (Grado6 * Math.pow(inty, 6)));
                            pm = inty - (((comp2 * intx) - (comp2 * inty)) / ((comp - comp2)));
                            Fpm = String.format("%." + decimales + "f", pm);
                            System.out.println(Fpm);
                            error = ((pm - intx) / pm) * 100;
                            error = abs(error);
                            Ferror = String.format("%." + decimales + "f", error);
                            System.out.println(Ferror);
                            //**********************************************************************************************************************************************************

                            if (error == 0) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error si es igual a 0: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (error <= ErrorI) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en menor o igual: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (i == 100) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en iteraciones: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se alcanzo el maximo de iteraciones y no se encontro la raiz", "no alcanzo", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            //**********************************************************************************************************************************************************

                        } while (salir == false);
                        break;
                    case 3:
                        //tangente
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        intx = x;

                        comp = Math.tan((constante + (Grado1 * Math.pow(intx, 1)) + (Grado2 * Math.pow(intx, 2)) + (Grado3 * Math.pow(intx, 3)) + (Grado4 * Math.pow(intx, 4))
                                + (Grado5 * Math.pow(intx, 5)) + (Grado6 * Math.pow(intx, 6))));

                        inty = y;

                        comp2 = Math.tan((constante) + (Grado1 * Math.pow(inty, 1)) + (Grado2 * Math.pow(inty, 2)) + (Grado3 * Math.pow(inty, 3)) + (Grado4 * Math.pow(inty, 4))
                                + (Grado5 * Math.pow(inty, 5)) + (Grado6 * Math.pow(inty, 6)));

                        aprox = comp * comp2;
                        //**********************************************************************************************************************************************************
                        if (comp == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + x + " contiene la Raiz" + comp, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        if (comp2 == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + y + " contiene la Raiz" + comp2, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        if (aprox > 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos no contiene las respuesta", "Aviso", JOptionPane.WARNING_MESSAGE);

                            if (JOptionPane.showConfirmDialog(this, "¬øquiere seguir con las comprobaciones?", "aviso", JOptionPane.INFORMATION_MESSAGE) == JOptionPane.NO_OPTION) {
                                JOptionPane.showMessageDialog(this, "Saliendo", "aviso", JOptionPane.INFORMATION_MESSAGE);
                                BtnResolver.setEnabled(false);
                                return;
                            } else {
                                JOptionPane.showMessageDialog(this, "se haran mas de 100 comprobaciones y se arrojara el resultado final", "aviso", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                        if (aprox < 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos si contiene las respuesta", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        }
                        //**********************************************************************************************************************************************************
                        pm = (((comp * inty) - (comp2 * intx)) / (comp - comp2));
                        System.out.println("iteracion :" + i);
                        Fpm = String.format("%." + decimales + "f", pm);
                        System.out.println(Fpm);
                        do {
                            intx = pm;
                            i++;
                            System.out.println("iteracion :" + i);
                            comp = Math.tan((constante + (Grado1 * Math.pow(intx, 1)) + (Grado2 * Math.pow(intx, 2)) + (Grado3 * Math.pow(intx, 3)) + (Grado4 * Math.pow(intx, 4))
                                    + (Grado5 * Math.pow(intx, 5)) + (Grado6 * Math.pow(intx, 6))));

                            comp2 = Math.tan((constante) + (Grado1 * Math.pow(inty, 1)) + (Grado2 * Math.pow(inty, 2)) + (Grado3 * Math.pow(inty, 3)) + (Grado4 * Math.pow(inty, 4))
                                    + (Grado5 * Math.pow(inty, 5)) + (Grado6 * Math.pow(inty, 6)));
                            pm = inty - (((comp2 * intx) - (comp2 * inty)) / ((comp - comp2)));
                            Fpm = String.format("%." + decimales + "f", pm);
                            System.out.println(Fpm);
                            error = ((pm - intx) / pm) * 100;
                            error = abs(error);
                            Ferror = String.format("%." + decimales + "f", error);
                            System.out.println(Ferror);
                            //**********************************************************************************************************************************************************

                            if (error == 0) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error si es igual a 0: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (error <= ErrorI) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en menor o igual: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (i == 100) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en iteraciones: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se alcanzo el maximo de iteraciones y no se encontro la raiz", "no alcanzo", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            //**********************************************************************************************************************************************************

                        } while (salir == false);
                        break;
                    case 4://cotangente
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        intx = x;

                        comp = 1 / (Math.tan((constante
                                + (Grado1 * Math.pow(intx, 1))
                                + (Grado2 * Math.pow(intx, 2))
                                + (Grado3 * Math.pow(intx, 3))
                                + (Grado4 * Math.pow(intx, 4))
                                + (Grado5 * Math.pow(intx, 5))
                                + (Grado6 * Math.pow(intx, 6)))));

                        inty = y;

                        comp2 = 1 / (Math.tan((constante)
                                + (Grado1 * Math.pow(inty, 1))
                                + (Grado2 * Math.pow(inty, 2))
                                + (Grado3 * Math.pow(inty, 3))
                                + (Grado4 * Math.pow(inty, 4))
                                + (Grado5 * Math.pow(inty, 5))
                                + (Grado6 * Math.pow(inty, 6))));

                        aprox = comp * comp2;
                        //**********************************************************************************************************************************************************
                        if (comp == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + x + " contiene la Raiz" + comp, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        if (comp2 == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + y + " contiene la Raiz" + comp2, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        if (aprox > 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos no contiene las respuesta", "Aviso", JOptionPane.WARNING_MESSAGE);

                            if (JOptionPane.showConfirmDialog(this, "¬øquiere seguir con las comprobaciones?", "aviso", JOptionPane.INFORMATION_MESSAGE) == JOptionPane.NO_OPTION) {
                                JOptionPane.showMessageDialog(this, "Saliendo", "aviso", JOptionPane.INFORMATION_MESSAGE);
                                BtnResolver.setEnabled(false);
                                return;
                            } else {
                                JOptionPane.showMessageDialog(this, "se haran mas de 100 comprobaciones y se arrojara el resultado final", "aviso", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                        if (aprox < 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos si contiene las respuesta", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        }
                        //**********************************************************************************************************************************************************
                        pm = (((comp * inty) - (comp2 * intx)) / (comp - comp2));
                        System.out.println("iteracion :" + i);
                        Fpm = String.format("%." + decimales + "f", pm);
                        System.out.println(Fpm);
                        do {
                            intx = pm;
                            i++;
                            System.out.println("iteracion :" + i);
                            comp = 1 / (Math.tan((constante + (Grado1 * Math.pow(intx, 1)) + (Grado2 * Math.pow(intx, 2)) + (Grado3 * Math.pow(intx, 3)) + (Grado4 * Math.pow(intx, 4))
                                    + (Grado5 * Math.pow(intx, 5)) + (Grado6 * Math.pow(intx, 6)))));

                            comp2 = 1 / (Math.tan((constante) + (Grado1 * Math.pow(inty, 1)) + (Grado2 * Math.pow(inty, 2)) + (Grado3 * Math.pow(inty, 3)) + (Grado4 * Math.pow(inty, 4))
                                    + (Grado5 * Math.pow(inty, 5)) + (Grado6 * Math.pow(inty, 6))));
                            pm = inty - (((comp2 * intx) - (comp2 * inty)) / ((comp - comp2)));
                            Fpm = String.format("%." + decimales + "f", pm);
                            System.out.println(Fpm);
                            error = ((pm - intx) / pm) * 100;
                            error = abs(error);
                            Ferror = String.format("%." + decimales + "f", error);
                            System.out.println(Ferror);
                            //**********************************************************************************************************************************************************

                            if (error == 0) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error si es igual a 0: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (error <= ErrorI) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en menor o igual: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (i == 100) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en iteraciones: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se alcanzo el maximo de iteraciones y no se encontro la raiz", "no alcanzo", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            //**********************************************************************************************************************************************************

                        } while (salir == false);
                        break;
                    case 5://secante
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        intx = x;

                        comp = 1 / (Math.cos((constante
                                + (Grado1 * Math.pow(intx, 1))
                                + (Grado2 * Math.pow(intx, 2))
                                + (Grado3 * Math.pow(intx, 3))
                                + (Grado4 * Math.pow(intx, 4))
                                + (Grado5 * Math.pow(intx, 5))
                                + (Grado6 * Math.pow(intx, 6)))));

                        inty = y;

                        comp2 = 1 / (Math.cos((constante)
                                + (Grado1 * Math.pow(inty, 1))
                                + (Grado2 * Math.pow(inty, 2))
                                + (Grado3 * Math.pow(inty, 3))
                                + (Grado4 * Math.pow(inty, 4))
                                + (Grado5 * Math.pow(inty, 5))
                                + (Grado6 * Math.pow(inty, 6))
                        ));

                        aprox = comp * comp2;
                        //**********************************************************************************************************************************************************
                        if (comp == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + x + " contiene la Raiz" + comp, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        if (comp2 == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + y + " contiene la Raiz" + comp2, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        if (aprox > 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos no contiene las respuesta", "Aviso", JOptionPane.WARNING_MESSAGE);

                            if (JOptionPane.showConfirmDialog(this, "¬øquiere seguir con las comprobaciones?", "aviso", JOptionPane.INFORMATION_MESSAGE) == JOptionPane.NO_OPTION) {
                                JOptionPane.showMessageDialog(this, "Saliendo", "aviso", JOptionPane.INFORMATION_MESSAGE);
                                BtnResolver.setEnabled(false);
                                return;
                            } else {
                                JOptionPane.showMessageDialog(this, "se haran mas de 100 comprobaciones y se arrojara el resultado final", "aviso", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                        if (aprox < 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos si contiene las respuesta", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        }
                        //**********************************************************************************************************************************************************
                        pm = (((comp * inty) - (comp2 * intx)) / (comp - comp2));
                        System.out.println("iteracion :" + i);
                        Fpm = String.format("%." + decimales + "f", pm);
                        System.out.println(Fpm);
                        do {
                            intx = pm;
                            i++;
                            System.out.println("iteracion :" + i);
                            comp = 1 / (Math.cos((constante
                                    + (Grado1 * Math.pow(intx, 1))
                                    + (Grado2 * Math.pow(intx, 2))
                                    + (Grado3 * Math.pow(intx, 3))
                                    + (Grado4 * Math.pow(intx, 4))
                                    + (Grado5 * Math.pow(intx, 5))
                                    + (Grado6 * Math.pow(intx, 6)))));

                            comp2 = 1 / (Math.cos((constante)
                                    + (Grado1 * Math.pow(inty, 1))
                                    + (Grado2 * Math.pow(inty, 2))
                                    + (Grado3 * Math.pow(inty, 3))
                                    + (Grado4 * Math.pow(inty, 4))
                                    + (Grado5 * Math.pow(inty, 5))
                                    + (Grado6 * Math.pow(inty, 6))
                            ));

                            pm = inty - (((comp2 * intx) - (comp2 * inty)) / ((comp - comp2)));
                            Fpm = String.format("%." + decimales + "f", pm);
                            System.out.println(Fpm);
                            error = ((pm - intx) / pm) * 100;
                            error = abs(error);
                            Ferror = String.format("%." + decimales + "f", error);
                            System.out.println(Ferror);
                            //**********************************************************************************************************************************************************

                            if (error == 0) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error si es igual a 0: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (error <= ErrorI) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en menor o igual: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (i == 100) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en iteraciones: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se alcanzo el maximo de iteraciones y no se encontro la raiz", "no alcanzo", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            //**********************************************************************************************************************************************************

                        } while (salir == false);
                        break;
                    case 6:
                        //cosecante
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        if (cbTipoDato.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(this, "Seleccione un tipo de dato", "AVISO", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        intx = x;

                        comp = 1 / (Math.sin((constante
                                + (Grado1 * Math.pow(intx, 1))
                                + (Grado2 * Math.pow(intx, 2))
                                + (Grado3 * Math.pow(intx, 3))
                                + (Grado4 * Math.pow(intx, 4))
                                + (Grado5 * Math.pow(intx, 5))
                                + (Grado6 * Math.pow(intx, 6)))));

                        inty = y;

                        comp2 = 1 / (Math.sin((constante)
                                + (Grado1 * Math.pow(inty, 1))
                                + (Grado2 * Math.pow(inty, 2))
                                + (Grado3 * Math.pow(inty, 3))
                                + (Grado4 * Math.pow(inty, 4))
                                + (Grado5 * Math.pow(inty, 5))
                                + (Grado6 * Math.pow(inty, 6))));

                        aprox = comp * comp2;
                        //**********************************************************************************************************************************************************
                        if (comp == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + x + " contiene la Raiz" + comp, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        if (comp2 == 0) {
                            JOptionPane.showMessageDialog(this, "EL intervalo " + y + " contiene la Raiz" + comp2, "aviso", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                        //**********************************************************************************************************************************************************
                        if (aprox > 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos no contiene las respuesta", "Aviso", JOptionPane.WARNING_MESSAGE);

                            if (JOptionPane.showConfirmDialog(this, "¬øquiere seguir con las comprobaciones?", "aviso", JOptionPane.INFORMATION_MESSAGE) == JOptionPane.NO_OPTION) {
                                JOptionPane.showMessageDialog(this, "Saliendo", "aviso", JOptionPane.INFORMATION_MESSAGE);
                                BtnResolver.setEnabled(false);
                                return;
                            } else {
                                JOptionPane.showMessageDialog(this, "se haran mas de 100 comprobaciones y se arrojara el resultado final", "aviso", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                        if (aprox < 0) {
                            JOptionPane.showMessageDialog(this, "los intervalos si contiene las respuesta", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                        }
                        //**********************************************************************************************************************************************************
                        pm = (((comp * inty) - (comp2 * intx)) / (comp - comp2));
                        System.out.println("itracion :" + i);
                        Fpm = String.format("%." + decimales + "f", pm);
                        System.out.println(Fpm);
                        do {
                            intx = pm;
                            i++;
                            System.out.println("iteracion :" + i);
                            comp = 1 / (Math.sin((constante
                                    + (Grado1 * Math.pow(intx, 1))
                                    + (Grado2 * Math.pow(intx, 2))
                                    + (Grado3 * Math.pow(intx, 3))
                                    + (Grado4 * Math.pow(intx, 4))
                                    + (Grado5 * Math.pow(intx, 5))
                                    + (Grado6 * Math.pow(intx, 6)))));

                            comp2 = 1 / (Math.sin((constante)
                                    + (Grado1 * Math.pow(inty, 1))
                                    + (Grado2 * Math.pow(inty, 2))
                                    + (Grado3 * Math.pow(inty, 3))
                                    + (Grado4 * Math.pow(inty, 4))
                                    + (Grado5 * Math.pow(inty, 5))
                                    + (Grado6 * Math.pow(inty, 6))));

                            pm = inty - (((comp2 * intx) - (comp2 * inty)) / ((comp - comp2)));
                            Fpm = String.format("%." + decimales + "f", pm);
                            System.out.println(Fpm);
                            error = ((pm - intx) / pm) * 100;
                            error = abs(error);
                            Ferror = String.format("%." + decimales + "f", error);
                            System.out.println(Ferror);
                            //**********************************************************************************************************************************************************

                            if (error == 0) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error si es igual a 0: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (error <= ErrorI) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en menor o igual: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se encontro la raiz", "CONGRATULATION", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            if (i == 100) {
                                Ferror = String.format("%." + decimales + "f", error);
                                System.out.println("error en iteraciones: " + Ferror);
                                JOptionPane.showMessageDialog(this, "se alcanzo el maximo de iteraciones y no se encontro la raiz", "no alcanzo", JOptionPane.INFORMATION_MESSAGE);
                                salir = true;
                            }
                            //**********************************************************************************************************************************************************

                        } while (salir == false);
                        break;

                    default:
                        System.err.println("error");
                }
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "error al ingresas los datos correctamente\n"
                    + "algunos campos siguen vacios", "error", JOptionPane.ERROR_MESSAGE);
        }
        aprox = 0;
        intx = 0;
        inty = 0;
        comp = 0;
        comp2 = 0;
        constante = 0;
        ErrorI = 0;
        Grado1 = 0;
        decimales = 0;
        Grado2 = 0;
        Grado3 = 0;
        Grado4 = 0;
        Grado5 = 0;
        Grado6 = 0;
        x = 0;
        y = 0;
        minutosX = 0;
        minutosY = 0;
        segundosX = 0;
        segundosY = 0;
        pm = 0;
        error = 0;
        i = 1;
        salir = false;

    }//GEN-LAST:event_BtnResolverActionPerformed

    private void cbTipoDatoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbTipoDatoItemStateChanged
        // TODO add your handling code here:
        switch (cbTipoDato.getSelectedIndex()) {
            case 0:
                txtMinutosX.setVisible(false);
                txtMinutosY.setVisible(false);
                txtMinutosX.setEnabled(false);
                txtSegundosX.setEnabled(false);
                txtMinutosY.setEnabled(false);
                txtSegundosY.setEnabled(false);
                txtSegundosX.setVisible(false);
                txtSegundosY.setVisible(false);
                txtDivisionPiradianX.setEnabled(false);
                txtDivisionPiradianY.setEnabled(false);
                txtDivisionPiradianX.setVisible(false);
                txtDivisionPiradianY.setVisible(false);
                lblminutosx.setVisible(false);
                lblminutosy.setVisible(false);
                lblsegundosx.setVisible(false);
                lblsegundosy.setVisible(false);
                lblpiX.setVisible(false);
                lblpiY.setVisible(false);
                break;
            case 1:
                //Grados
                txtMinutosX.setEnabled(false);
                txtSegundosX.setEnabled(false);
                txtMinutosY.setEnabled(false);
                txtSegundosY.setEnabled(false);
                txtDivisionPiradianX.setEnabled(false);
                txtDivisionPiradianY.setEnabled(false);
                lblminutosx.setVisible(false);
                lblminutosy.setVisible(false);
                lblsegundosx.setVisible(false);
                lblsegundosy.setVisible(false);
                lblpiX.setVisible(false);
                lblpiY.setVisible(false);
                break;
            case 2:
                //Grados, minutos, segundos
                txtMinutosX.setEnabled(true);
                txtSegundosX.setEnabled(true);
                txtMinutosX.setVisible(true);
                txtMinutosY.setVisible(true);
                txtMinutosY.setEnabled(true);
                txtSegundosY.setEnabled(true);
                txtSegundosX.setVisible(true);
                txtSegundosY.setVisible(true);
                txtDivisionPiradianX.setEnabled(false);
                txtDivisionPiradianY.setEnabled(false);
                lblminutosx.setVisible(true);
                lblminutosy.setVisible(true);
                lblsegundosx.setVisible(true);
                lblsegundosy.setVisible(true);
                lblpiX.setVisible(false);
                lblpiY.setVisible(false);
                break;
            case 3:
                //radianes

                txtMinutosX.setVisible(false);
                txtMinutosY.setVisible(false);
                txtMinutosX.setEnabled(false);
                txtSegundosX.setEnabled(false);
                txtMinutosY.setEnabled(false);
                txtSegundosY.setEnabled(false);
                txtSegundosX.setVisible(false);
                txtSegundosY.setVisible(false);
                txtDivisionPiradianX.setEnabled(false);
                txtDivisionPiradianY.setEnabled(false);
                txtDivisionPiradianX.setVisible(false);
                txtDivisionPiradianY.setVisible(false);
                lblminutosx.setVisible(false);
                lblminutosy.setVisible(false);
                lblsegundosx.setVisible(false);
                lblsegundosy.setVisible(false);
                lblpiX.setVisible(false);
                lblpiY.setVisible(false);
                break;
            case 4:
                //piRadianes
                txtMinutosX.setVisible(false);
                txtMinutosY.setVisible(false);
                txtMinutosX.setEnabled(false);
                txtSegundosX.setEnabled(false);
                txtMinutosY.setEnabled(false);
                txtSegundosY.setEnabled(false);
                txtSegundosX.setVisible(false);
                txtSegundosY.setVisible(false);
                txtDivisionPiradianX.setEnabled(true);
                txtDivisionPiradianY.setEnabled(true);
                txtDivisionPiradianX.setVisible(true);
                txtDivisionPiradianY.setVisible(true);
                lblminutosx.setVisible(false);
                lblminutosy.setVisible(false);
                lblsegundosx.setVisible(false);
                lblsegundosy.setVisible(false);
                lblpiX.setVisible(true);
                lblpiY.setVisible(true);
                break;
            default:
                System.err.println("error xdd");
        }
    }//GEN-LAST:event_cbTipoDatoItemStateChanged

    private void txtSegundosXKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSegundosXKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) && c != '.') {
            evt.consume();
        }
        if (c == '.' && txtSegundosX.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_txtSegundosXKeyTyped

    private void txtMinutosXKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMinutosXKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtMinutosXKeyTyped

    private void txtMinutosYKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMinutosYKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_txtMinutosYKeyTyped

    private void txtSegundosYKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSegundosYKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) && c != '.') {
            evt.consume();
        }
        if (c == '.' && txtSegundosY.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_txtSegundosYKeyTyped

    private void txtDivisionPiradianXKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDivisionPiradianXKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) && c != '.') {
            evt.consume();
        }

        if (c == '.' && txtError.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_txtDivisionPiradianXKeyTyped

    private void txtDivisionPiradianYKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDivisionPiradianYKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) && c != '.') {
            evt.consume();
        }

        if (c == '.' && txtError.getText().contains(".")) {
            evt.consume();
        }
    }//GEN-LAST:event_txtDivisionPiradianYKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReglafalsaTrigonometrica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReglafalsaTrigonometrica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReglafalsaTrigonometrica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReglafalsaTrigonometrica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReglafalsaTrigonometrica().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnResolver;
    private javax.swing.JButton Btnlimpiar;
    private javax.swing.JComboBox<String> CbTrigonometrico;
    private javax.swing.JTextField TxtDecimales;
    private javax.swing.JComboBox<String> cbTipoDato;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblminutosx;
    private javax.swing.JLabel lblminutosy;
    private javax.swing.JLabel lblpiX;
    private javax.swing.JLabel lblpiY;
    private javax.swing.JLabel lblsegundosx;
    private javax.swing.JLabel lblsegundosy;
    private javax.swing.JTextField txtConstante;
    private javax.swing.JTextField txtDivisionPiradianX;
    private javax.swing.JTextField txtDivisionPiradianY;
    private javax.swing.JTextField txtError;
    private javax.swing.JTextField txtGrado1;
    private javax.swing.JTextField txtGrado2;
    private javax.swing.JTextField txtGrado3;
    private javax.swing.JTextField txtGrado4;
    private javax.swing.JTextField txtGrado5;
    private javax.swing.JTextField txtGrado6;
    private javax.swing.JTextField txtIntervaloX;
    private javax.swing.JTextField txtIntervaloY;
    private javax.swing.JTextField txtMinutosX;
    private javax.swing.JTextField txtMinutosY;
    private javax.swing.JTextField txtSegundosX;
    private javax.swing.JTextField txtSegundosY;
    // End of variables declaration//GEN-END:variables
    public static void digito(java.awt.event.KeyEvent evt) {
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) && c != '.' && c != '-') {

            evt.consume();
        }
    }

    public static boolean error(javax.swing.JTextField t) {
        if ("".equals(t.getText())) {
            return false;
        }
        return true;
    }

}
